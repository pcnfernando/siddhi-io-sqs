{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"siddhi-io-sqs \u00b6 The siddhi-io-sqs extension is an extension to Siddhi that used to receive and publish events via AWS SQS Service. This extension allows users to subscribe to a SQS queue and receive/publish SQS messages. Find some useful links below: Source code Releases Issue tracker Jenkins Build Status \u00b6 Siddhi Branch Jenkins Build Status master Latest API Docs \u00b6 Latest API Docs is 1.1.1-SNAPSHOT . Features \u00b6 How to use \u00b6 Using the extension in WSO2 Stream Processor You can use this extension in the latest WSO2 Stream Processor that is a part of WSO2 Analytics offering, with editor, debugger and simulation support. This extension is shipped by default with WSO2 Stream Processor, if you wish to use an alternative version of this extension you can replace the component jar that can be found in the <STREAM_PROCESSOR_HOME>/lib directory. Using the extension as a java library This extension can be added as a maven dependency along with other Siddhi dependencies to your project. <dependency> <groupId>org.wso2.extension.siddhi.io.sqs</groupId> <artifactId>siddhi-io-sqs</artifactId> <version>x.x.x</version> </dependency> Post your questions with the \"Siddhi\" tag in Stackoverflow . Siddhi developers can be contacted via the mailing lists: Developers List : dev@wso2.org Architecture List : architecture@wso2.org We are committed to ensuring support for this extension in production. Our unique approach ensures that all support leverages our open development methodology and is provided by the very same engineers who build the technology. For more details and to take advantage of this unique opportunity contact us via http://wso2.com/support/ . How to Contribute \u00b6 Please report issues at GitHub Issue Tracker . Send your contributions as pull requests to master branch . Contact us \u00b6 Post your questions with the \"Siddhi\" tag in Stackoverflow . Siddhi developers can be contacted via the mailing lists: Developers List : dev@wso2.org Architecture List : architecture@wso2.org Support \u00b6 We are committed to ensuring support for this extension in production. Our unique approach ensures that all support leverages our open development methodology and is provided by the very same engineers who build the technology. For more details and to take advantage of this unique opportunity contact us via http://wso2.com/support/ .","title":"Welcome"},{"location":"#siddhi-io-sqs","text":"The siddhi-io-sqs extension is an extension to Siddhi that used to receive and publish events via AWS SQS Service. This extension allows users to subscribe to a SQS queue and receive/publish SQS messages. Find some useful links below: Source code Releases Issue tracker","title":"siddhi-io-sqs"},{"location":"#jenkins-build-status","text":"Siddhi Branch Jenkins Build Status master","title":"Jenkins Build Status"},{"location":"#latest-api-docs","text":"Latest API Docs is 1.1.1-SNAPSHOT .","title":"Latest API Docs"},{"location":"#features","text":"","title":"Features"},{"location":"#how-to-use","text":"Using the extension in WSO2 Stream Processor You can use this extension in the latest WSO2 Stream Processor that is a part of WSO2 Analytics offering, with editor, debugger and simulation support. This extension is shipped by default with WSO2 Stream Processor, if you wish to use an alternative version of this extension you can replace the component jar that can be found in the <STREAM_PROCESSOR_HOME>/lib directory. Using the extension as a java library This extension can be added as a maven dependency along with other Siddhi dependencies to your project. <dependency> <groupId>org.wso2.extension.siddhi.io.sqs</groupId> <artifactId>siddhi-io-sqs</artifactId> <version>x.x.x</version> </dependency> Post your questions with the \"Siddhi\" tag in Stackoverflow . Siddhi developers can be contacted via the mailing lists: Developers List : dev@wso2.org Architecture List : architecture@wso2.org We are committed to ensuring support for this extension in production. Our unique approach ensures that all support leverages our open development methodology and is provided by the very same engineers who build the technology. For more details and to take advantage of this unique opportunity contact us via http://wso2.com/support/ .","title":"How to use"},{"location":"#how-to-contribute","text":"Please report issues at GitHub Issue Tracker . Send your contributions as pull requests to master branch .","title":"How to Contribute"},{"location":"#contact-us","text":"Post your questions with the \"Siddhi\" tag in Stackoverflow . Siddhi developers can be contacted via the mailing lists: Developers List : dev@wso2.org Architecture List : architecture@wso2.org","title":"Contact us"},{"location":"#support","text":"We are committed to ensuring support for this extension in production. Our unique approach ensures that all support leverages our open development methodology and is provided by the very same engineers who build the technology. For more details and to take advantage of this unique opportunity contact us via http://wso2.com/support/ .","title":"Support"},{"location":"license/","text":"","title":"License"},{"location":"about/license/","text":"Copyright (c) 2018 WSO2 Inc. ( http://www.wso2.org ) All Rights Reserved. WSO2 Inc. licenses this file to you under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with the License. You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0 Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language governing permissions and limitations under the License. ------------------------------------------------------------------------- Apache License Version 2.0, January 2004 http://www.apache.org/licenses/ TERMS AND CONDITIONS FOR USE, REPRODUCTION, AND DISTRIBUTION 1. Definitions. \"License\" shall mean the terms and conditions for use, reproduction, and distribution as defined by Sections 1 through 9 of this document. \"Licensor\" shall mean the copyright owner or entity authorized by the copyright owner that is granting the License. \"Legal Entity\" shall mean the union of the acting entity and all other entities that control, are controlled by, or are under common control with that entity. For the purposes of this definition, \"control\" means (i) the power, direct or indirect, to cause the direction or management of such entity, whether by contract or otherwise, or (ii) ownership of fifty percent (50%) or more of the outstanding shares, or (iii) beneficial ownership of such entity. \"You\" (or \"Your\") shall mean an individual or Legal Entity exercising permissions granted by this License. \"Source\" form shall mean the preferred form for making modifications, including but not limited to software source code, documentation source, and configuration files. \"Object\" form shall mean any form resulting from mechanical transformation or translation of a Source form, including but not limited to compiled object code, generated documentation, and conversions to other media types. \"Work\" shall mean the work of authorship, whether in Source or Object form, made available under the License, as indicated by a copyright notice that is included in or attached to the work (an example is provided in the Appendix below). \"Derivative Works\" shall mean any work, whether in Source or Object form, that is based on (or derived from) the Work and for which the editorial revisions, annotations, elaborations, or other modifications represent, as a whole, an original work of authorship. For the purposes of this License, Derivative Works shall not include works that remain separable from, or merely link (or bind by name) to the interfaces of, the Work and Derivative Works thereof. \"Contribution\" shall mean any work of authorship, including the original version of the Work and any modifications or additions to that Work or Derivative Works thereof, that is intentionally submitted to Licensor for inclusion in the Work by the copyright owner or by an individual or Legal Entity authorized to submit on behalf of the copyright owner. For the purposes of this definition, \"submitted\" means any form of electronic, verbal, or written communication sent to the Licensor or its representatives, including but not limited to communication on electronic mailing lists, source code control systems, and issue tracking systems that are managed by, or on behalf of, the Licensor for the purpose of discussing and improving the Work, but excluding communication that is conspicuously marked or otherwise designated in writing by the copyright owner as \"Not a Contribution.\" \"Contributor\" shall mean Licensor and any individual or Legal Entity on behalf of whom a Contribution has been received by Licensor and subsequently incorporated within the Work. 2. Grant of Copyright License. Subject to the terms and conditions of this License, each Contributor hereby grants to You a perpetual, worldwide, non-exclusive, no-charge, royalty-free, irrevocable copyright license to reproduce, prepare Derivative Works of, publicly display, publicly perform, sublicense, and distribute the Work and such Derivative Works in Source or Object form. 3. Grant of Patent License. Subject to the terms and conditions of this License, each Contributor hereby grants to You a perpetual, worldwide, non-exclusive, no-charge, royalty-free, irrevocable (except as stated in this section) patent license to make, have made, use, offer to sell, sell, import, and otherwise transfer the Work, where such license applies only to those patent claims licensable by such Contributor that are necessarily infringed by their Contribution(s) alone or by combination of their Contribution(s) with the Work to which such Contribution(s) was submitted. If You institute patent litigation against any entity (including a cross-claim or counterclaim in a lawsuit) alleging that the Work or a Contribution incorporated within the Work constitutes direct or contributory patent infringement, then any patent licenses granted to You under this License for that Work shall terminate as of the date such litigation is filed. 4. Redistribution. You may reproduce and distribute copies of the Work or Derivative Works thereof in any medium, with or without modifications, and in Source or Object form, provided that You meet the following conditions: (a) You must give any other recipients of the Work or Derivative Works a copy of this License; and (b) You must cause any modified files to carry prominent notices stating that You changed the files; and (c) You must retain, in the Source form of any Derivative Works that You distribute, all copyright, patent, trademark, and attribution notices from the Source form of the Work, excluding those notices that do not pertain to any part of the Derivative Works; and (d) If the Work includes a \"NOTICE\" text file as part of its distribution, then any Derivative Works that You distribute must include a readable copy of the attribution notices contained within such NOTICE file, excluding those notices that do not pertain to any part of the Derivative Works, in at least one of the following places: within a NOTICE text file distributed as part of the Derivative Works; within the Source form or documentation, if provided along with the Derivative Works; or, within a display generated by the Derivative Works, if and wherever such third-party notices normally appear. The contents of the NOTICE file are for informational purposes only and do not modify the License. You may add Your own attribution notices within Derivative Works that You distribute, alongside or as an addendum to the NOTICE text from the Work, provided that such additional attribution notices cannot be construed as modifying the License. You may add Your own copyright statement to Your modifications and may provide additional or different license terms and conditions for use, reproduction, or distribution of Your modifications, or for any such Derivative Works as a whole, provided Your use, reproduction, and distribution of the Work otherwise complies with the conditions stated in this License. 5. Submission of Contributions. Unless You explicitly state otherwise, any Contribution intentionally submitted for inclusion in the Work by You to the Licensor shall be under the terms and conditions of this License, without any additional terms or conditions. Notwithstanding the above, nothing herein shall supersede or modify the terms of any separate license agreement you may have executed with Licensor regarding such Contributions. 6. Trademarks. This License does not grant permission to use the trade names, trademarks, service marks, or product names of the Licensor, except as required for reasonable and customary use in describing the origin of the Work and reproducing the content of the NOTICE file. 7. Disclaimer of Warranty. Unless required by applicable law or agreed to in writing, Licensor provides the Work (and each Contributor provides its Contributions) on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied, including, without limitation, any warranties or conditions of TITLE, NON-INFRINGEMENT, MERCHANTABILITY, or FITNESS FOR A PARTICULAR PURPOSE. You are solely responsible for determining the appropriateness of using or redistributing the Work and assume any risks associated with Your exercise of permissions under this License. 8. Limitation of Liability. In no event and under no legal theory, whether in tort (including negligence), contract, or otherwise, unless required by applicable law (such as deliberate and grossly negligent acts) or agreed to in writing, shall any Contributor be liable to You for damages, including any direct, indirect, special, incidental, or consequential damages of any character arising as a result of this License or out of the use or inability to use the Work (including but not limited to damages for loss of goodwill, work stoppage, computer failure or malfunction, or any and all other commercial damages or losses), even if such Contributor has been advised of the possibility of such damages. 9. Accepting Warranty or Additional Liability. While redistributing the Work or Derivative Works thereof, You may choose to offer, and charge a fee for, acceptance of support, warranty, indemnity, or other liability obligations and/or rights consistent with this License. However, in accepting such obligations, You may act only on Your own behalf and on Your sole responsibility, not on behalf of any other Contributor, and only if You agree to indemnify, defend, and hold each Contributor harmless for any liability incurred by, or claims asserted against, such Contributor by reason of your accepting any such warranty or additional liability. END OF TERMS AND CONDITIONS","title":"License"},{"location":"api/1.0.0/","text":"API Docs - v1.0.0 \u00b6 Sink \u00b6 sqs (Sink) \u00b6 Syntax @sink(type=\"sqs\", @map(...))) Examples EXAMPLE 1 Source \u00b6 sqs (Source) \u00b6 SQS source allows users to subscribe and consume messages from a AWS SQS Queue. It has the ability to receive Text messages Syntax @source(type=\"sqs\", queue=\"<STRING>\", access.key=\"<STRING>\", secret.key=\"<STRING>\", region=\"<STRING>\", polling.interval=\"<INT>\", waiting.time=\"<INT>\", max.number.of.messages=\"<INT>\", visibility.timeout=\"<INT>\", delete.messages=\"<BOOL>\", delete.retry.interval=\"<INT>\", max.number.of.delete.retry.attempts=\"<INT>\", number.of.parallel.consumers=\"<INT>\", @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic queue Queue name which SQS Source should subscribe to STRING No No access.key Access Key for the Amazon Web Services STRING No No secret.key Secret Key of the Amazon User STRING No No region Amazon Web Service Region STRING No No polling.interval Interval (in milliseconds) between two message retrieval operations INT No No waiting.time Maximum amount (in seconds) that a polling call will wait for a message to become available in the queue -1 INT Yes No max.number.of.messages Maximum number of messages retrieved from the queue per polling call (Actual maybe smaller than this even if there's more messages in the queue) 1 INT No No visibility.timeout The length of time (in seconds) for which a message received from a queue will be invisible to other consumers(only applicable if consumer doesn't purge the received messages from the queue). -1 INT Yes No delete.messages Should the message be deleted from the queue after consuming it. delete.messages BOOL Yes No delete.retry.interval Time interval (in milliseconds) consumer should retry to delete a message in the case of failure during a message delete operation. 5000 INT Yes No max.number.of.delete.retry.attempts Maximum number retry attempts to be performed in case of a failure. 10 INT Yes No number.of.parallel.consumers Size of the thread pool that should be used for polling. 1 INT No No Examples EXAMPLE 1 @source(type='sqs',queue='<queue url>',access.key='<access_key>',secret.key='<secret_key>',region='us-east-2',polling.interval='5000',max.number.of.messages='10',number.of.parallel.consumers='1',purge.messages='true',waiting.time='2',visibility.timeout='30',delete.retry.interval='1000',max.number.of.delete.retry.attempts='10',@map(type='xml',enclosing.element=\"//events\",@attributes(symbol='symbol', message_id='trp:MESSAGE_ID') ))define stream inStream (symbol string, message_id string); Following Example shows how to define a SQS source to receive messages from the service","title":"1.0.0"},{"location":"api/1.0.0/#api-docs-v100","text":"","title":"API Docs - v1.0.0"},{"location":"api/1.0.0/#sink","text":"","title":"Sink"},{"location":"api/1.0.0/#sqs-sink","text":"Syntax @sink(type=\"sqs\", @map(...))) Examples EXAMPLE 1","title":"sqs (Sink)"},{"location":"api/1.0.0/#source","text":"","title":"Source"},{"location":"api/1.0.0/#sqs-source","text":"SQS source allows users to subscribe and consume messages from a AWS SQS Queue. It has the ability to receive Text messages Syntax @source(type=\"sqs\", queue=\"<STRING>\", access.key=\"<STRING>\", secret.key=\"<STRING>\", region=\"<STRING>\", polling.interval=\"<INT>\", waiting.time=\"<INT>\", max.number.of.messages=\"<INT>\", visibility.timeout=\"<INT>\", delete.messages=\"<BOOL>\", delete.retry.interval=\"<INT>\", max.number.of.delete.retry.attempts=\"<INT>\", number.of.parallel.consumers=\"<INT>\", @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic queue Queue name which SQS Source should subscribe to STRING No No access.key Access Key for the Amazon Web Services STRING No No secret.key Secret Key of the Amazon User STRING No No region Amazon Web Service Region STRING No No polling.interval Interval (in milliseconds) between two message retrieval operations INT No No waiting.time Maximum amount (in seconds) that a polling call will wait for a message to become available in the queue -1 INT Yes No max.number.of.messages Maximum number of messages retrieved from the queue per polling call (Actual maybe smaller than this even if there's more messages in the queue) 1 INT No No visibility.timeout The length of time (in seconds) for which a message received from a queue will be invisible to other consumers(only applicable if consumer doesn't purge the received messages from the queue). -1 INT Yes No delete.messages Should the message be deleted from the queue after consuming it. delete.messages BOOL Yes No delete.retry.interval Time interval (in milliseconds) consumer should retry to delete a message in the case of failure during a message delete operation. 5000 INT Yes No max.number.of.delete.retry.attempts Maximum number retry attempts to be performed in case of a failure. 10 INT Yes No number.of.parallel.consumers Size of the thread pool that should be used for polling. 1 INT No No Examples EXAMPLE 1 @source(type='sqs',queue='<queue url>',access.key='<access_key>',secret.key='<secret_key>',region='us-east-2',polling.interval='5000',max.number.of.messages='10',number.of.parallel.consumers='1',purge.messages='true',waiting.time='2',visibility.timeout='30',delete.retry.interval='1000',max.number.of.delete.retry.attempts='10',@map(type='xml',enclosing.element=\"//events\",@attributes(symbol='symbol', message_id='trp:MESSAGE_ID') ))define stream inStream (symbol string, message_id string); Following Example shows how to define a SQS source to receive messages from the service","title":"sqs (Source)"},{"location":"api/1.0.1/","text":"API Docs - v1.0.1 \u00b6 Sink \u00b6 sqs (Sink) \u00b6 SQS sink allows users to connect and publish messages to an AWS SQS Queue. It has the ability to only publish Text messages Syntax @sink(type=\"sqs\", queue=\"<STRING>\", access.key=\"<STRING>\", secret.key=\"<STRING>\", region=\"<STRING>\", message.group.id=\"<STRING>\", deduplication.id=\"<STRING>\", delay.interval=\"<INT>\", @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic queue Queue url which SQS Sink should connect to STRING No No access.key Access Key for the Amazon Web Services. (This is a mandatory field and should be provided either in the deployment.yml or in the sink definition itself) none STRING Yes No secret.key Secret Key of the Amazon User. (This is a mandatory field and should be provided either in the deployment.yml or in the sink definition itself) none STRING Yes No region Amazon Web Service Region STRING No No message.group.id ID of the group that the message belong to(only applicable for FIFO Queues) null STRING Yes Yes deduplication.id ID by which a FIFO queue identifies the duplication in the queue(only applicable for FIFO queues) null STRING Yes Yes delay.interval Time in seconds for how long the message remain in the queue until it is available for the consumers to consume. -1 INT Yes No Examples EXAMPLE 1 @sink(type='sqs',queue='<queue_url>',access.key='<aws_access_key>',secret.key='<aws_secret_key>',region='<region>',delay.interval='5',deduplication.id='{{deduplicationID}}',message.group.id='charuka',@map(type='xml') )define stream outStream(symbol string, deduplicationID string); Following Example shows how to define a SQS sink to publish messages to the service Source \u00b6 sqs (Source) \u00b6 SQS source allows users to connect and consume messages from a AWS SQS Queue. It has the ability to receive Text messages Syntax @source(type=\"sqs\", queue=\"<STRING>\", access.key=\"<STRING>\", secret.key=\"<STRING>\", region=\"<STRING>\", polling.interval=\"<INT>\", wait.time=\"<INT>\", max.number.of.messages=\"<INT>\", visibility.timeout=\"<INT>\", delete.messages=\"<BOOL>\", delete.retry.interval=\"<INT>\", max.number.of.delete.retry.attempts=\"<INT>\", number.of.parallel.consumers=\"<INT>\", @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic queue Queue name which SQS Source should subscribe to STRING No No access.key Access Key for the Amazon Web Services. (This is a mandatory field and should be provided either in the deployment.yml or in the source definition itself) null STRING Yes No secret.key Secret Key of the Amazon User. (This is a mandatory field and should be provided either in the deployment.yml or in the source definition itself) null STRING Yes No region Amazon Web Service Region STRING No No polling.interval Interval (in milliseconds) between two message retrieval operations INT No No wait.time Maximum amount (in seconds) that a polling call will wait for a message to become available in the queue -1 INT Yes No max.number.of.messages Maximum number of messages retrieved from the queue per polling call (Actual maybe smaller than this even if there's more messages in the queue) 1 INT No No visibility.timeout The length of time (in seconds) for which a message received from a queue will be invisible to other consumers(only applicable if consumer doesn't purge the received messages from the queue). -1 INT Yes No delete.messages Should the message be deleted from the queue after consuming it. delete.messages BOOL Yes No delete.retry.interval Time interval (in milliseconds) consumer should retry to delete a message in the case of failure during a message delete operation. 5000 INT Yes No max.number.of.delete.retry.attempts Maximum number retry attempts to be performed in case of a failure. 10 INT Yes No number.of.parallel.consumers Size of the thread pool that should be used for polling. 1 INT No No Examples EXAMPLE 1 @source(type='sqs',queue='<queue url>',access.key='<access_key>',secret.key='<secret_key>',region='us-east-2',polling.interval='5000',max.number.of.messages='10',number.of.parallel.consumers='1',purge.messages='true',wait.time='2',visibility.timeout='30',delete.retry.interval='1000',max.number.of.delete.retry.attempts='10',@map(type='xml',enclosing.element=\"//events\",@attributes(symbol='symbol', message_id='trp:MESSAGE_ID') ))define stream inStream (symbol string, message_id string); Following Example shows how to define a SQS source to receive messages from the service","title":"1.0.1"},{"location":"api/1.0.1/#api-docs-v101","text":"","title":"API Docs - v1.0.1"},{"location":"api/1.0.1/#sink","text":"","title":"Sink"},{"location":"api/1.0.1/#sqs-sink","text":"SQS sink allows users to connect and publish messages to an AWS SQS Queue. It has the ability to only publish Text messages Syntax @sink(type=\"sqs\", queue=\"<STRING>\", access.key=\"<STRING>\", secret.key=\"<STRING>\", region=\"<STRING>\", message.group.id=\"<STRING>\", deduplication.id=\"<STRING>\", delay.interval=\"<INT>\", @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic queue Queue url which SQS Sink should connect to STRING No No access.key Access Key for the Amazon Web Services. (This is a mandatory field and should be provided either in the deployment.yml or in the sink definition itself) none STRING Yes No secret.key Secret Key of the Amazon User. (This is a mandatory field and should be provided either in the deployment.yml or in the sink definition itself) none STRING Yes No region Amazon Web Service Region STRING No No message.group.id ID of the group that the message belong to(only applicable for FIFO Queues) null STRING Yes Yes deduplication.id ID by which a FIFO queue identifies the duplication in the queue(only applicable for FIFO queues) null STRING Yes Yes delay.interval Time in seconds for how long the message remain in the queue until it is available for the consumers to consume. -1 INT Yes No Examples EXAMPLE 1 @sink(type='sqs',queue='<queue_url>',access.key='<aws_access_key>',secret.key='<aws_secret_key>',region='<region>',delay.interval='5',deduplication.id='{{deduplicationID}}',message.group.id='charuka',@map(type='xml') )define stream outStream(symbol string, deduplicationID string); Following Example shows how to define a SQS sink to publish messages to the service","title":"sqs (Sink)"},{"location":"api/1.0.1/#source","text":"","title":"Source"},{"location":"api/1.0.1/#sqs-source","text":"SQS source allows users to connect and consume messages from a AWS SQS Queue. It has the ability to receive Text messages Syntax @source(type=\"sqs\", queue=\"<STRING>\", access.key=\"<STRING>\", secret.key=\"<STRING>\", region=\"<STRING>\", polling.interval=\"<INT>\", wait.time=\"<INT>\", max.number.of.messages=\"<INT>\", visibility.timeout=\"<INT>\", delete.messages=\"<BOOL>\", delete.retry.interval=\"<INT>\", max.number.of.delete.retry.attempts=\"<INT>\", number.of.parallel.consumers=\"<INT>\", @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic queue Queue name which SQS Source should subscribe to STRING No No access.key Access Key for the Amazon Web Services. (This is a mandatory field and should be provided either in the deployment.yml or in the source definition itself) null STRING Yes No secret.key Secret Key of the Amazon User. (This is a mandatory field and should be provided either in the deployment.yml or in the source definition itself) null STRING Yes No region Amazon Web Service Region STRING No No polling.interval Interval (in milliseconds) between two message retrieval operations INT No No wait.time Maximum amount (in seconds) that a polling call will wait for a message to become available in the queue -1 INT Yes No max.number.of.messages Maximum number of messages retrieved from the queue per polling call (Actual maybe smaller than this even if there's more messages in the queue) 1 INT No No visibility.timeout The length of time (in seconds) for which a message received from a queue will be invisible to other consumers(only applicable if consumer doesn't purge the received messages from the queue). -1 INT Yes No delete.messages Should the message be deleted from the queue after consuming it. delete.messages BOOL Yes No delete.retry.interval Time interval (in milliseconds) consumer should retry to delete a message in the case of failure during a message delete operation. 5000 INT Yes No max.number.of.delete.retry.attempts Maximum number retry attempts to be performed in case of a failure. 10 INT Yes No number.of.parallel.consumers Size of the thread pool that should be used for polling. 1 INT No No Examples EXAMPLE 1 @source(type='sqs',queue='<queue url>',access.key='<access_key>',secret.key='<secret_key>',region='us-east-2',polling.interval='5000',max.number.of.messages='10',number.of.parallel.consumers='1',purge.messages='true',wait.time='2',visibility.timeout='30',delete.retry.interval='1000',max.number.of.delete.retry.attempts='10',@map(type='xml',enclosing.element=\"//events\",@attributes(symbol='symbol', message_id='trp:MESSAGE_ID') ))define stream inStream (symbol string, message_id string); Following Example shows how to define a SQS source to receive messages from the service","title":"sqs (Source)"},{"location":"api/1.0.2/","text":"API Docs - v1.0.2 \u00b6 Sink \u00b6 sqs (Sink) \u00b6 SQS sink allows users to connect and publish messages to an AWS SQS Queue. It has the ability to only publish Text messages Syntax @sink(type=\"sqs\", queue=\"<STRING>\", access.key=\"<STRING>\", secret.key=\"<STRING>\", region=\"<STRING>\", message.group.id=\"<STRING>\", deduplication.id=\"<STRING>\", delay.interval=\"<INT>\", @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic queue Queue url which SQS Sink should connect to STRING No No access.key Access Key for the Amazon Web Services. (This is a mandatory field and should be provided either in the deployment.yml or in the sink definition itself) none STRING Yes No secret.key Secret Key of the Amazon User. (This is a mandatory field and should be provided either in the deployment.yml or in the sink definition itself) none STRING Yes No region Amazon Web Service Region STRING No No message.group.id ID of the group that the message belong to(only applicable for FIFO Queues) null STRING Yes Yes deduplication.id ID by which a FIFO queue identifies the duplication in the queue(only applicable for FIFO queues) null STRING Yes Yes delay.interval Time in seconds for how long the message remain in the queue until it is available for the consumers to consume. -1 INT Yes No Examples EXAMPLE 1 @sink(type='sqs',queue='<queue_url>',access.key='<aws_access_key>',secret.key='<aws_secret_key>',region='<region>',delay.interval='5',deduplication.id='{{deduplicationID}}',message.group.id='charuka',@map(type='xml') )define stream outStream(symbol string, deduplicationID string); Following Example shows how to define a SQS sink to publish messages to the service Source \u00b6 sqs (Source) \u00b6 SQS source allows users to connect and consume messages from a AWS SQS Queue. It has the ability to receive Text messages Syntax @source(type=\"sqs\", queue=\"<STRING>\", access.key=\"<STRING>\", secret.key=\"<STRING>\", region=\"<STRING>\", polling.interval=\"<INT>\", wait.time=\"<INT>\", max.number.of.messages=\"<INT>\", visibility.timeout=\"<INT>\", delete.messages=\"<BOOL>\", delete.retry.interval=\"<INT>\", max.number.of.delete.retry.attempts=\"<INT>\", number.of.parallel.consumers=\"<INT>\", @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic queue Queue name which SQS Source should subscribe to STRING No No access.key Access Key for the Amazon Web Services. (This is a mandatory field and should be provided either in the deployment.yml or in the source definition itself) null STRING Yes No secret.key Secret Key of the Amazon User. (This is a mandatory field and should be provided either in the deployment.yml or in the source definition itself) null STRING Yes No region Amazon Web Service Region STRING No No polling.interval Interval (in milliseconds) between two message retrieval operations INT No No wait.time Maximum amount (in seconds) that a polling call will wait for a message to become available in the queue -1 INT Yes No max.number.of.messages Maximum number of messages retrieved from the queue per polling call (Actual maybe smaller than this even if there's more messages in the queue) 1 INT No No visibility.timeout The length of time (in seconds) for which a message received from a queue will be invisible to other consumers(only applicable if consumer doesn't purge the received messages from the queue). -1 INT Yes No delete.messages Should the message be deleted from the queue after consuming it. delete.messages BOOL Yes No delete.retry.interval Time interval (in milliseconds) consumer should retry to delete a message in the case of failure during a message delete operation. 5000 INT Yes No max.number.of.delete.retry.attempts Maximum number retry attempts to be performed in case of a failure. 10 INT Yes No number.of.parallel.consumers Size of the thread pool that should be used for polling. 1 INT No No Examples EXAMPLE 1 @source(type='sqs',queue='<queue url>',access.key='<access_key>',secret.key='<secret_key>',region='us-east-2',polling.interval='5000',max.number.of.messages='10',number.of.parallel.consumers='1',purge.messages='true',wait.time='2',visibility.timeout='30',delete.retry.interval='1000',max.number.of.delete.retry.attempts='10',@map(type='xml',enclosing.element=\"//events\",@attributes(symbol='symbol', message_id='trp:MESSAGE_ID') ))define stream inStream (symbol string, message_id string); Following Example shows how to define a SQS source to receive messages from the service","title":"1.0.2"},{"location":"api/1.0.2/#api-docs-v102","text":"","title":"API Docs - v1.0.2"},{"location":"api/1.0.2/#sink","text":"","title":"Sink"},{"location":"api/1.0.2/#sqs-sink","text":"SQS sink allows users to connect and publish messages to an AWS SQS Queue. It has the ability to only publish Text messages Syntax @sink(type=\"sqs\", queue=\"<STRING>\", access.key=\"<STRING>\", secret.key=\"<STRING>\", region=\"<STRING>\", message.group.id=\"<STRING>\", deduplication.id=\"<STRING>\", delay.interval=\"<INT>\", @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic queue Queue url which SQS Sink should connect to STRING No No access.key Access Key for the Amazon Web Services. (This is a mandatory field and should be provided either in the deployment.yml or in the sink definition itself) none STRING Yes No secret.key Secret Key of the Amazon User. (This is a mandatory field and should be provided either in the deployment.yml or in the sink definition itself) none STRING Yes No region Amazon Web Service Region STRING No No message.group.id ID of the group that the message belong to(only applicable for FIFO Queues) null STRING Yes Yes deduplication.id ID by which a FIFO queue identifies the duplication in the queue(only applicable for FIFO queues) null STRING Yes Yes delay.interval Time in seconds for how long the message remain in the queue until it is available for the consumers to consume. -1 INT Yes No Examples EXAMPLE 1 @sink(type='sqs',queue='<queue_url>',access.key='<aws_access_key>',secret.key='<aws_secret_key>',region='<region>',delay.interval='5',deduplication.id='{{deduplicationID}}',message.group.id='charuka',@map(type='xml') )define stream outStream(symbol string, deduplicationID string); Following Example shows how to define a SQS sink to publish messages to the service","title":"sqs (Sink)"},{"location":"api/1.0.2/#source","text":"","title":"Source"},{"location":"api/1.0.2/#sqs-source","text":"SQS source allows users to connect and consume messages from a AWS SQS Queue. It has the ability to receive Text messages Syntax @source(type=\"sqs\", queue=\"<STRING>\", access.key=\"<STRING>\", secret.key=\"<STRING>\", region=\"<STRING>\", polling.interval=\"<INT>\", wait.time=\"<INT>\", max.number.of.messages=\"<INT>\", visibility.timeout=\"<INT>\", delete.messages=\"<BOOL>\", delete.retry.interval=\"<INT>\", max.number.of.delete.retry.attempts=\"<INT>\", number.of.parallel.consumers=\"<INT>\", @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic queue Queue name which SQS Source should subscribe to STRING No No access.key Access Key for the Amazon Web Services. (This is a mandatory field and should be provided either in the deployment.yml or in the source definition itself) null STRING Yes No secret.key Secret Key of the Amazon User. (This is a mandatory field and should be provided either in the deployment.yml or in the source definition itself) null STRING Yes No region Amazon Web Service Region STRING No No polling.interval Interval (in milliseconds) between two message retrieval operations INT No No wait.time Maximum amount (in seconds) that a polling call will wait for a message to become available in the queue -1 INT Yes No max.number.of.messages Maximum number of messages retrieved from the queue per polling call (Actual maybe smaller than this even if there's more messages in the queue) 1 INT No No visibility.timeout The length of time (in seconds) for which a message received from a queue will be invisible to other consumers(only applicable if consumer doesn't purge the received messages from the queue). -1 INT Yes No delete.messages Should the message be deleted from the queue after consuming it. delete.messages BOOL Yes No delete.retry.interval Time interval (in milliseconds) consumer should retry to delete a message in the case of failure during a message delete operation. 5000 INT Yes No max.number.of.delete.retry.attempts Maximum number retry attempts to be performed in case of a failure. 10 INT Yes No number.of.parallel.consumers Size of the thread pool that should be used for polling. 1 INT No No Examples EXAMPLE 1 @source(type='sqs',queue='<queue url>',access.key='<access_key>',secret.key='<secret_key>',region='us-east-2',polling.interval='5000',max.number.of.messages='10',number.of.parallel.consumers='1',purge.messages='true',wait.time='2',visibility.timeout='30',delete.retry.interval='1000',max.number.of.delete.retry.attempts='10',@map(type='xml',enclosing.element=\"//events\",@attributes(symbol='symbol', message_id='trp:MESSAGE_ID') ))define stream inStream (symbol string, message_id string); Following Example shows how to define a SQS source to receive messages from the service","title":"sqs (Source)"},{"location":"api/1.0.3/","text":"API Docs - v1.0.3 \u00b6 Sink \u00b6 sqs (Sink) \u00b6 SQS sink allows users to connect and publish messages to an AWS SQS Queue. It has the ability to only publish Text messages Syntax @sink(type=\"sqs\", queue=\"<STRING>\", access.key=\"<STRING>\", secret.key=\"<STRING>\", region=\"<STRING>\", message.group.id=\"<STRING>\", deduplication.id=\"<STRING>\", delay.interval=\"<INT>\", @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic queue Queue url which SQS Sink should connect to STRING No No access.key Access Key for the Amazon Web Services. (This is a mandatory field and should be provided either in the deployment.yml or in the sink definition itself) none STRING Yes No secret.key Secret Key of the Amazon User. (This is a mandatory field and should be provided either in the deployment.yml or in the sink definition itself) none STRING Yes No region Amazon Web Service Region STRING No No message.group.id ID of the group that the message belong to(only applicable for FIFO Queues) null STRING Yes Yes deduplication.id ID by which a FIFO queue identifies the duplication in the queue(only applicable for FIFO queues) null STRING Yes Yes delay.interval Time in seconds for how long the message remain in the queue until it is available for the consumers to consume. -1 INT Yes No Examples EXAMPLE 1 @sink(type='sqs',queue='<queue_url>',access.key='<aws_access_key>',secret.key='<aws_secret_key>',region='<region>',delay.interval='5',deduplication.id='{{deduplicationID}}',message.group.id='charuka',@map(type='xml') )define stream outStream(symbol string, deduplicationID string); Following Example shows how to define a SQS sink to publish messages to the service Source \u00b6 sqs (Source) \u00b6 SQS source allows users to connect and consume messages from a AWS SQS Queue. It has the ability to receive Text messages Syntax @source(type=\"sqs\", queue=\"<STRING>\", access.key=\"<STRING>\", secret.key=\"<STRING>\", region=\"<STRING>\", polling.interval=\"<INT>\", wait.time=\"<INT>\", max.number.of.messages=\"<INT>\", visibility.timeout=\"<INT>\", delete.messages=\"<BOOL>\", delete.retry.interval=\"<INT>\", max.number.of.delete.retry.attempts=\"<INT>\", number.of.parallel.consumers=\"<INT>\", @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic queue Queue name which SQS Source should subscribe to STRING No No access.key Access Key for the Amazon Web Services. (This is a mandatory field and should be provided either in the deployment.yml or in the source definition itself) null STRING Yes No secret.key Secret Key of the Amazon User. (This is a mandatory field and should be provided either in the deployment.yml or in the source definition itself) null STRING Yes No region Amazon Web Service Region STRING No No polling.interval Interval (in milliseconds) between two message retrieval operations INT No No wait.time Maximum amount (in seconds) that a polling call will wait for a message to become available in the queue -1 INT Yes No max.number.of.messages Maximum number of messages retrieved from the queue per polling call (Actual maybe smaller than this even if there's more messages in the queue) 1 INT No No visibility.timeout The length of time (in seconds) for which a message received from a queue will be invisible to other consumers(only applicable if consumer doesn't purge the received messages from the queue). -1 INT Yes No delete.messages Should the message be deleted from the queue after consuming it. delete.messages BOOL Yes No delete.retry.interval Time interval (in milliseconds) consumer should retry to delete a message in the case of failure during a message delete operation. 5000 INT Yes No max.number.of.delete.retry.attempts Maximum number retry attempts to be performed in case of a failure. 10 INT Yes No number.of.parallel.consumers Size of the thread pool that should be used for polling. 1 INT No No Examples EXAMPLE 1 @source(type='sqs',queue='<queue url>',access.key='<access_key>',secret.key='<secret_key>',region='us-east-2',polling.interval='5000',max.number.of.messages='10',number.of.parallel.consumers='1',purge.messages='true',wait.time='2',visibility.timeout='30',delete.retry.interval='1000',max.number.of.delete.retry.attempts='10',@map(type='xml',enclosing.element=\"//events\",@attributes(symbol='symbol', message_id='trp:MESSAGE_ID') ))define stream inStream (symbol string, message_id string); Following Example shows how to define a SQS source to receive messages from the service","title":"1.0.3"},{"location":"api/1.0.3/#api-docs-v103","text":"","title":"API Docs - v1.0.3"},{"location":"api/1.0.3/#sink","text":"","title":"Sink"},{"location":"api/1.0.3/#sqs-sink","text":"SQS sink allows users to connect and publish messages to an AWS SQS Queue. It has the ability to only publish Text messages Syntax @sink(type=\"sqs\", queue=\"<STRING>\", access.key=\"<STRING>\", secret.key=\"<STRING>\", region=\"<STRING>\", message.group.id=\"<STRING>\", deduplication.id=\"<STRING>\", delay.interval=\"<INT>\", @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic queue Queue url which SQS Sink should connect to STRING No No access.key Access Key for the Amazon Web Services. (This is a mandatory field and should be provided either in the deployment.yml or in the sink definition itself) none STRING Yes No secret.key Secret Key of the Amazon User. (This is a mandatory field and should be provided either in the deployment.yml or in the sink definition itself) none STRING Yes No region Amazon Web Service Region STRING No No message.group.id ID of the group that the message belong to(only applicable for FIFO Queues) null STRING Yes Yes deduplication.id ID by which a FIFO queue identifies the duplication in the queue(only applicable for FIFO queues) null STRING Yes Yes delay.interval Time in seconds for how long the message remain in the queue until it is available for the consumers to consume. -1 INT Yes No Examples EXAMPLE 1 @sink(type='sqs',queue='<queue_url>',access.key='<aws_access_key>',secret.key='<aws_secret_key>',region='<region>',delay.interval='5',deduplication.id='{{deduplicationID}}',message.group.id='charuka',@map(type='xml') )define stream outStream(symbol string, deduplicationID string); Following Example shows how to define a SQS sink to publish messages to the service","title":"sqs (Sink)"},{"location":"api/1.0.3/#source","text":"","title":"Source"},{"location":"api/1.0.3/#sqs-source","text":"SQS source allows users to connect and consume messages from a AWS SQS Queue. It has the ability to receive Text messages Syntax @source(type=\"sqs\", queue=\"<STRING>\", access.key=\"<STRING>\", secret.key=\"<STRING>\", region=\"<STRING>\", polling.interval=\"<INT>\", wait.time=\"<INT>\", max.number.of.messages=\"<INT>\", visibility.timeout=\"<INT>\", delete.messages=\"<BOOL>\", delete.retry.interval=\"<INT>\", max.number.of.delete.retry.attempts=\"<INT>\", number.of.parallel.consumers=\"<INT>\", @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic queue Queue name which SQS Source should subscribe to STRING No No access.key Access Key for the Amazon Web Services. (This is a mandatory field and should be provided either in the deployment.yml or in the source definition itself) null STRING Yes No secret.key Secret Key of the Amazon User. (This is a mandatory field and should be provided either in the deployment.yml or in the source definition itself) null STRING Yes No region Amazon Web Service Region STRING No No polling.interval Interval (in milliseconds) between two message retrieval operations INT No No wait.time Maximum amount (in seconds) that a polling call will wait for a message to become available in the queue -1 INT Yes No max.number.of.messages Maximum number of messages retrieved from the queue per polling call (Actual maybe smaller than this even if there's more messages in the queue) 1 INT No No visibility.timeout The length of time (in seconds) for which a message received from a queue will be invisible to other consumers(only applicable if consumer doesn't purge the received messages from the queue). -1 INT Yes No delete.messages Should the message be deleted from the queue after consuming it. delete.messages BOOL Yes No delete.retry.interval Time interval (in milliseconds) consumer should retry to delete a message in the case of failure during a message delete operation. 5000 INT Yes No max.number.of.delete.retry.attempts Maximum number retry attempts to be performed in case of a failure. 10 INT Yes No number.of.parallel.consumers Size of the thread pool that should be used for polling. 1 INT No No Examples EXAMPLE 1 @source(type='sqs',queue='<queue url>',access.key='<access_key>',secret.key='<secret_key>',region='us-east-2',polling.interval='5000',max.number.of.messages='10',number.of.parallel.consumers='1',purge.messages='true',wait.time='2',visibility.timeout='30',delete.retry.interval='1000',max.number.of.delete.retry.attempts='10',@map(type='xml',enclosing.element=\"//events\",@attributes(symbol='symbol', message_id='trp:MESSAGE_ID') ))define stream inStream (symbol string, message_id string); Following Example shows how to define a SQS source to receive messages from the service","title":"sqs (Source)"},{"location":"api/1.0.4/","text":"API Docs - v1.0.4 \u00b6 Sink \u00b6 sqs (Sink) \u00b6 SQS sink allows users to connect and publish messages to an AWS SQS Queue. It has the ability to only publish Text messages Syntax @sink(type=\"sqs\", queue=\"<STRING>\", access.key=\"<STRING>\", secret.key=\"<STRING>\", region=\"<STRING>\", message.group.id=\"<STRING>\", deduplication.id=\"<STRING>\", delay.interval=\"<INT>\", @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic queue Queue url which SQS Sink should connect to STRING No No access.key Access Key for the Amazon Web Services. (This is a mandatory field and should be provided either in the deployment.yml or in the sink definition itself) none STRING Yes No secret.key Secret Key of the Amazon User. (This is a mandatory field and should be provided either in the deployment.yml or in the sink definition itself) none STRING Yes No region Amazon Web Service Region STRING No No message.group.id ID of the group that the message belong to(only applicable for FIFO Queues) null STRING Yes Yes deduplication.id ID by which a FIFO queue identifies the duplication in the queue(only applicable for FIFO queues) null STRING Yes Yes delay.interval Time in seconds for how long the message remain in the queue until it is available for the consumers to consume. -1 INT Yes No Examples EXAMPLE 1 @sink(type='sqs',queue='<queue_url>',access.key='<aws_access_key>',secret.key='<aws_secret_key>',region='<region>',delay.interval='5',deduplication.id='{{deduplicationID}}',message.group.id='charuka',@map(type='xml') )define stream outStream(symbol string, deduplicationID string); Following Example shows how to define a SQS sink to publish messages to the service Source \u00b6 sqs (Source) \u00b6 SQS source allows users to connect and consume messages from a AWS SQS Queue. It has the ability to receive Text messages Syntax @source(type=\"sqs\", queue=\"<STRING>\", access.key=\"<STRING>\", secret.key=\"<STRING>\", region=\"<STRING>\", polling.interval=\"<INT>\", wait.time=\"<INT>\", max.number.of.messages=\"<INT>\", visibility.timeout=\"<INT>\", delete.messages=\"<BOOL>\", delete.retry.interval=\"<INT>\", max.number.of.delete.retry.attempts=\"<INT>\", number.of.parallel.consumers=\"<INT>\", @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic queue Queue name which SQS Source should subscribe to STRING No No access.key Access Key for the Amazon Web Services. (This is a mandatory field and should be provided either in the deployment.yml or in the source definition itself) null STRING Yes No secret.key Secret Key of the Amazon User. (This is a mandatory field and should be provided either in the deployment.yml or in the source definition itself) null STRING Yes No region Amazon Web Service Region STRING No No polling.interval Interval (in milliseconds) between two message retrieval operations INT No No wait.time Maximum amount (in seconds) that a polling call will wait for a message to become available in the queue -1 INT Yes No max.number.of.messages Maximum number of messages retrieved from the queue per polling call (Actual maybe smaller than this even if there's more messages in the queue) 1 INT No No visibility.timeout The length of time (in seconds) for which a message received from a queue will be invisible to other consumers(only applicable if consumer doesn't purge the received messages from the queue). -1 INT Yes No delete.messages Should the message be deleted from the queue after consuming it. delete.messages BOOL Yes No delete.retry.interval Time interval (in milliseconds) consumer should retry to delete a message in the case of failure during a message delete operation. 5000 INT Yes No max.number.of.delete.retry.attempts Maximum number retry attempts to be performed in case of a failure. 10 INT Yes No number.of.parallel.consumers Size of the thread pool that should be used for polling. 1 INT No No Examples EXAMPLE 1 @source(type='sqs',queue='<queue url>',access.key='<access_key>',secret.key='<secret_key>',region='us-east-2',polling.interval='5000',max.number.of.messages='10',number.of.parallel.consumers='1',purge.messages='true',wait.time='2',visibility.timeout='30',delete.retry.interval='1000',max.number.of.delete.retry.attempts='10',@map(type='xml',enclosing.element=\"//events\",@attributes(symbol='symbol', message_id='trp:MESSAGE_ID') ))define stream inStream (symbol string, message_id string); Following Example shows how to define a SQS source to receive messages from the service","title":"1.0.4"},{"location":"api/1.0.4/#api-docs-v104","text":"","title":"API Docs - v1.0.4"},{"location":"api/1.0.4/#sink","text":"","title":"Sink"},{"location":"api/1.0.4/#sqs-sink","text":"SQS sink allows users to connect and publish messages to an AWS SQS Queue. It has the ability to only publish Text messages Syntax @sink(type=\"sqs\", queue=\"<STRING>\", access.key=\"<STRING>\", secret.key=\"<STRING>\", region=\"<STRING>\", message.group.id=\"<STRING>\", deduplication.id=\"<STRING>\", delay.interval=\"<INT>\", @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic queue Queue url which SQS Sink should connect to STRING No No access.key Access Key for the Amazon Web Services. (This is a mandatory field and should be provided either in the deployment.yml or in the sink definition itself) none STRING Yes No secret.key Secret Key of the Amazon User. (This is a mandatory field and should be provided either in the deployment.yml or in the sink definition itself) none STRING Yes No region Amazon Web Service Region STRING No No message.group.id ID of the group that the message belong to(only applicable for FIFO Queues) null STRING Yes Yes deduplication.id ID by which a FIFO queue identifies the duplication in the queue(only applicable for FIFO queues) null STRING Yes Yes delay.interval Time in seconds for how long the message remain in the queue until it is available for the consumers to consume. -1 INT Yes No Examples EXAMPLE 1 @sink(type='sqs',queue='<queue_url>',access.key='<aws_access_key>',secret.key='<aws_secret_key>',region='<region>',delay.interval='5',deduplication.id='{{deduplicationID}}',message.group.id='charuka',@map(type='xml') )define stream outStream(symbol string, deduplicationID string); Following Example shows how to define a SQS sink to publish messages to the service","title":"sqs (Sink)"},{"location":"api/1.0.4/#source","text":"","title":"Source"},{"location":"api/1.0.4/#sqs-source","text":"SQS source allows users to connect and consume messages from a AWS SQS Queue. It has the ability to receive Text messages Syntax @source(type=\"sqs\", queue=\"<STRING>\", access.key=\"<STRING>\", secret.key=\"<STRING>\", region=\"<STRING>\", polling.interval=\"<INT>\", wait.time=\"<INT>\", max.number.of.messages=\"<INT>\", visibility.timeout=\"<INT>\", delete.messages=\"<BOOL>\", delete.retry.interval=\"<INT>\", max.number.of.delete.retry.attempts=\"<INT>\", number.of.parallel.consumers=\"<INT>\", @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic queue Queue name which SQS Source should subscribe to STRING No No access.key Access Key for the Amazon Web Services. (This is a mandatory field and should be provided either in the deployment.yml or in the source definition itself) null STRING Yes No secret.key Secret Key of the Amazon User. (This is a mandatory field and should be provided either in the deployment.yml or in the source definition itself) null STRING Yes No region Amazon Web Service Region STRING No No polling.interval Interval (in milliseconds) between two message retrieval operations INT No No wait.time Maximum amount (in seconds) that a polling call will wait for a message to become available in the queue -1 INT Yes No max.number.of.messages Maximum number of messages retrieved from the queue per polling call (Actual maybe smaller than this even if there's more messages in the queue) 1 INT No No visibility.timeout The length of time (in seconds) for which a message received from a queue will be invisible to other consumers(only applicable if consumer doesn't purge the received messages from the queue). -1 INT Yes No delete.messages Should the message be deleted from the queue after consuming it. delete.messages BOOL Yes No delete.retry.interval Time interval (in milliseconds) consumer should retry to delete a message in the case of failure during a message delete operation. 5000 INT Yes No max.number.of.delete.retry.attempts Maximum number retry attempts to be performed in case of a failure. 10 INT Yes No number.of.parallel.consumers Size of the thread pool that should be used for polling. 1 INT No No Examples EXAMPLE 1 @source(type='sqs',queue='<queue url>',access.key='<access_key>',secret.key='<secret_key>',region='us-east-2',polling.interval='5000',max.number.of.messages='10',number.of.parallel.consumers='1',purge.messages='true',wait.time='2',visibility.timeout='30',delete.retry.interval='1000',max.number.of.delete.retry.attempts='10',@map(type='xml',enclosing.element=\"//events\",@attributes(symbol='symbol', message_id='trp:MESSAGE_ID') ))define stream inStream (symbol string, message_id string); Following Example shows how to define a SQS source to receive messages from the service","title":"sqs (Source)"},{"location":"api/1.0.5/","text":"API Docs - v1.0.5 \u00b6 Sink \u00b6 sqs (Sink) \u00b6 SQS sink allows users to connect and publish messages to an AWS SQS Queue. It has the ability to only publish Text messages Syntax @sink(type=\"sqs\", queue=\"<STRING>\", access.key=\"<STRING>\", secret.key=\"<STRING>\", region=\"<STRING>\", message.group.id=\"<STRING>\", deduplication.id=\"<STRING>\", delay.interval=\"<INT>\", @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic queue Queue url which SQS Sink should connect to STRING No No access.key Access Key for the Amazon Web Services. (This is a mandatory field and should be provided either in the deployment.yml or in the sink definition itself) none STRING Yes No secret.key Secret Key of the Amazon User. (This is a mandatory field and should be provided either in the deployment.yml or in the sink definition itself) none STRING Yes No region Amazon Web Service Region STRING No No message.group.id ID of the group that the message belong to(only applicable for FIFO Queues) null STRING Yes Yes deduplication.id ID by which a FIFO queue identifies the duplication in the queue(only applicable for FIFO queues) null STRING Yes Yes delay.interval Time in seconds for how long the message remain in the queue until it is available for the consumers to consume. -1 INT Yes No Examples EXAMPLE 1 @sink(type='sqs',queue='<queue_url>',access.key='<aws_access_key>',secret.key='<aws_secret_key>',region='<region>',delay.interval='5',deduplication.id='{{deduplicationID}}',message.group.id='charuka',@map(type='xml') )define stream outStream(symbol string, deduplicationID string); Following Example shows how to define a SQS sink to publish messages to the service Source \u00b6 sqs (Source) \u00b6 SQS source allows users to connect and consume messages from a AWS SQS Queue. It has the ability to receive Text messages Syntax @source(type=\"sqs\", queue=\"<STRING>\", access.key=\"<STRING>\", secret.key=\"<STRING>\", region=\"<STRING>\", polling.interval=\"<INT>\", wait.time=\"<INT>\", max.number.of.messages=\"<INT>\", visibility.timeout=\"<INT>\", delete.messages=\"<BOOL>\", delete.retry.interval=\"<INT>\", max.number.of.delete.retry.attempts=\"<INT>\", number.of.parallel.consumers=\"<INT>\", @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic queue Queue name which SQS Source should subscribe to STRING No No access.key Access Key for the Amazon Web Services. (This is a mandatory field and should be provided either in the deployment.yml or in the source definition itself) null STRING Yes No secret.key Secret Key of the Amazon User. (This is a mandatory field and should be provided either in the deployment.yml or in the source definition itself) null STRING Yes No region Amazon Web Service Region STRING No No polling.interval Interval (in milliseconds) between two message retrieval operations INT No No wait.time Maximum amount (in seconds) that a polling call will wait for a message to become available in the queue -1 INT Yes No max.number.of.messages Maximum number of messages retrieved from the queue per polling call (Actual maybe smaller than this even if there's more messages in the queue) 1 INT No No visibility.timeout The length of time (in seconds) for which a message received from a queue will be invisible to other consumers(only applicable if consumer doesn't purge the received messages from the queue). -1 INT Yes No delete.messages Should the message be deleted from the queue after consuming it. delete.messages BOOL Yes No delete.retry.interval Time interval (in milliseconds) consumer should retry to delete a message in the case of failure during a message delete operation. 5000 INT Yes No max.number.of.delete.retry.attempts Maximum number retry attempts to be performed in case of a failure. 10 INT Yes No number.of.parallel.consumers Size of the thread pool that should be used for polling. 1 INT No No Examples EXAMPLE 1 @source(type='sqs',queue='<queue url>',access.key='<access_key>',secret.key='<secret_key>',region='us-east-2',polling.interval='5000',max.number.of.messages='10',number.of.parallel.consumers='1',purge.messages='true',wait.time='2',visibility.timeout='30',delete.retry.interval='1000',max.number.of.delete.retry.attempts='10',@map(type='xml',enclosing.element=\"//events\",@attributes(symbol='symbol', message_id='trp:MESSAGE_ID') ))define stream inStream (symbol string, message_id string); Following Example shows how to define a SQS source to receive messages from the service","title":"1.0.5"},{"location":"api/1.0.5/#api-docs-v105","text":"","title":"API Docs - v1.0.5"},{"location":"api/1.0.5/#sink","text":"","title":"Sink"},{"location":"api/1.0.5/#sqs-sink","text":"SQS sink allows users to connect and publish messages to an AWS SQS Queue. It has the ability to only publish Text messages Syntax @sink(type=\"sqs\", queue=\"<STRING>\", access.key=\"<STRING>\", secret.key=\"<STRING>\", region=\"<STRING>\", message.group.id=\"<STRING>\", deduplication.id=\"<STRING>\", delay.interval=\"<INT>\", @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic queue Queue url which SQS Sink should connect to STRING No No access.key Access Key for the Amazon Web Services. (This is a mandatory field and should be provided either in the deployment.yml or in the sink definition itself) none STRING Yes No secret.key Secret Key of the Amazon User. (This is a mandatory field and should be provided either in the deployment.yml or in the sink definition itself) none STRING Yes No region Amazon Web Service Region STRING No No message.group.id ID of the group that the message belong to(only applicable for FIFO Queues) null STRING Yes Yes deduplication.id ID by which a FIFO queue identifies the duplication in the queue(only applicable for FIFO queues) null STRING Yes Yes delay.interval Time in seconds for how long the message remain in the queue until it is available for the consumers to consume. -1 INT Yes No Examples EXAMPLE 1 @sink(type='sqs',queue='<queue_url>',access.key='<aws_access_key>',secret.key='<aws_secret_key>',region='<region>',delay.interval='5',deduplication.id='{{deduplicationID}}',message.group.id='charuka',@map(type='xml') )define stream outStream(symbol string, deduplicationID string); Following Example shows how to define a SQS sink to publish messages to the service","title":"sqs (Sink)"},{"location":"api/1.0.5/#source","text":"","title":"Source"},{"location":"api/1.0.5/#sqs-source","text":"SQS source allows users to connect and consume messages from a AWS SQS Queue. It has the ability to receive Text messages Syntax @source(type=\"sqs\", queue=\"<STRING>\", access.key=\"<STRING>\", secret.key=\"<STRING>\", region=\"<STRING>\", polling.interval=\"<INT>\", wait.time=\"<INT>\", max.number.of.messages=\"<INT>\", visibility.timeout=\"<INT>\", delete.messages=\"<BOOL>\", delete.retry.interval=\"<INT>\", max.number.of.delete.retry.attempts=\"<INT>\", number.of.parallel.consumers=\"<INT>\", @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic queue Queue name which SQS Source should subscribe to STRING No No access.key Access Key for the Amazon Web Services. (This is a mandatory field and should be provided either in the deployment.yml or in the source definition itself) null STRING Yes No secret.key Secret Key of the Amazon User. (This is a mandatory field and should be provided either in the deployment.yml or in the source definition itself) null STRING Yes No region Amazon Web Service Region STRING No No polling.interval Interval (in milliseconds) between two message retrieval operations INT No No wait.time Maximum amount (in seconds) that a polling call will wait for a message to become available in the queue -1 INT Yes No max.number.of.messages Maximum number of messages retrieved from the queue per polling call (Actual maybe smaller than this even if there's more messages in the queue) 1 INT No No visibility.timeout The length of time (in seconds) for which a message received from a queue will be invisible to other consumers(only applicable if consumer doesn't purge the received messages from the queue). -1 INT Yes No delete.messages Should the message be deleted from the queue after consuming it. delete.messages BOOL Yes No delete.retry.interval Time interval (in milliseconds) consumer should retry to delete a message in the case of failure during a message delete operation. 5000 INT Yes No max.number.of.delete.retry.attempts Maximum number retry attempts to be performed in case of a failure. 10 INT Yes No number.of.parallel.consumers Size of the thread pool that should be used for polling. 1 INT No No Examples EXAMPLE 1 @source(type='sqs',queue='<queue url>',access.key='<access_key>',secret.key='<secret_key>',region='us-east-2',polling.interval='5000',max.number.of.messages='10',number.of.parallel.consumers='1',purge.messages='true',wait.time='2',visibility.timeout='30',delete.retry.interval='1000',max.number.of.delete.retry.attempts='10',@map(type='xml',enclosing.element=\"//events\",@attributes(symbol='symbol', message_id='trp:MESSAGE_ID') ))define stream inStream (symbol string, message_id string); Following Example shows how to define a SQS source to receive messages from the service","title":"sqs (Source)"},{"location":"api/1.0.6/","text":"API Docs - v1.0.6 \u00b6 Sink \u00b6 sqs (Sink) \u00b6 SQS sink allows users to connect and publish messages to an AWS SQS Queue. It has the ability to only publish Text messages Syntax @sink(type=\"sqs\", queue=\"<STRING>\", access.key=\"<STRING>\", secret.key=\"<STRING>\", region=\"<STRING>\", message.group.id=\"<STRING>\", deduplication.id=\"<STRING>\", delay.interval=\"<INT>\", @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic queue Queue url which SQS Sink should connect to STRING No No access.key Access Key for the Amazon Web Services. (This is a mandatory field and should be provided either in the deployment.yml or in the sink definition itself) none STRING Yes No secret.key Secret Key of the Amazon User. (This is a mandatory field and should be provided either in the deployment.yml or in the sink definition itself) none STRING Yes No region Amazon Web Service Region STRING No No message.group.id ID of the group that the message belong to(only applicable for FIFO Queues) null STRING Yes Yes deduplication.id ID by which a FIFO queue identifies the duplication in the queue(only applicable for FIFO queues) null STRING Yes Yes delay.interval Time in seconds for how long the message remain in the queue until it is available for the consumers to consume. -1 INT Yes No Examples EXAMPLE 1 @sink(type='sqs',queue='<queue_url>',access.key='<aws_access_key>',secret.key='<aws_secret_key>',region='<region>',delay.interval='5',deduplication.id='{{deduplicationID}}',message.group.id='charuka',@map(type='xml') )define stream outStream(symbol string, deduplicationID string); Following Example shows how to define a SQS sink to publish messages to the service Source \u00b6 sqs (Source) \u00b6 SQS source allows users to connect and consume messages from a AWS SQS Queue. It has the ability to receive Text messages Syntax @source(type=\"sqs\", queue=\"<STRING>\", access.key=\"<STRING>\", secret.key=\"<STRING>\", region=\"<STRING>\", polling.interval=\"<INT>\", wait.time=\"<INT>\", max.number.of.messages=\"<INT>\", visibility.timeout=\"<INT>\", delete.messages=\"<BOOL>\", delete.retry.interval=\"<INT>\", max.number.of.delete.retry.attempts=\"<INT>\", number.of.parallel.consumers=\"<INT>\", @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic queue Queue name which SQS Source should subscribe to STRING No No access.key Access Key for the Amazon Web Services. (This is a mandatory field and should be provided either in the deployment.yml or in the source definition itself) null STRING Yes No secret.key Secret Key of the Amazon User. (This is a mandatory field and should be provided either in the deployment.yml or in the source definition itself) null STRING Yes No region Amazon Web Service Region STRING No No polling.interval Interval (in milliseconds) between two message retrieval operations INT No No wait.time Maximum amount (in seconds) that a polling call will wait for a message to become available in the queue -1 INT Yes No max.number.of.messages Maximum number of messages retrieved from the queue per polling call (Actual maybe smaller than this even if there's more messages in the queue) 1 INT No No visibility.timeout The length of time (in seconds) for which a message received from a queue will be invisible to other consumers(only applicable if consumer doesn't purge the received messages from the queue). -1 INT Yes No delete.messages Should the message be deleted from the queue after consuming it. delete.messages BOOL Yes No delete.retry.interval Time interval (in milliseconds) consumer should retry to delete a message in the case of failure during a message delete operation. 5000 INT Yes No max.number.of.delete.retry.attempts Maximum number retry attempts to be performed in case of a failure. 10 INT Yes No number.of.parallel.consumers Size of the thread pool that should be used for polling. 1 INT No No Examples EXAMPLE 1 @source(type='sqs',queue='<queue url>',access.key='<access_key>',secret.key='<secret_key>',region='us-east-2',polling.interval='5000',max.number.of.messages='10',number.of.parallel.consumers='1',purge.messages='true',wait.time='2',visibility.timeout='30',delete.retry.interval='1000',max.number.of.delete.retry.attempts='10',@map(type='xml',enclosing.element=\"//events\",@attributes(symbol='symbol', message_id='trp:MESSAGE_ID') ))define stream inStream (symbol string, message_id string); Following Example shows how to define a SQS source to receive messages from the service","title":"1.0.6"},{"location":"api/1.0.6/#api-docs-v106","text":"","title":"API Docs - v1.0.6"},{"location":"api/1.0.6/#sink","text":"","title":"Sink"},{"location":"api/1.0.6/#sqs-sink","text":"SQS sink allows users to connect and publish messages to an AWS SQS Queue. It has the ability to only publish Text messages Syntax @sink(type=\"sqs\", queue=\"<STRING>\", access.key=\"<STRING>\", secret.key=\"<STRING>\", region=\"<STRING>\", message.group.id=\"<STRING>\", deduplication.id=\"<STRING>\", delay.interval=\"<INT>\", @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic queue Queue url which SQS Sink should connect to STRING No No access.key Access Key for the Amazon Web Services. (This is a mandatory field and should be provided either in the deployment.yml or in the sink definition itself) none STRING Yes No secret.key Secret Key of the Amazon User. (This is a mandatory field and should be provided either in the deployment.yml or in the sink definition itself) none STRING Yes No region Amazon Web Service Region STRING No No message.group.id ID of the group that the message belong to(only applicable for FIFO Queues) null STRING Yes Yes deduplication.id ID by which a FIFO queue identifies the duplication in the queue(only applicable for FIFO queues) null STRING Yes Yes delay.interval Time in seconds for how long the message remain in the queue until it is available for the consumers to consume. -1 INT Yes No Examples EXAMPLE 1 @sink(type='sqs',queue='<queue_url>',access.key='<aws_access_key>',secret.key='<aws_secret_key>',region='<region>',delay.interval='5',deduplication.id='{{deduplicationID}}',message.group.id='charuka',@map(type='xml') )define stream outStream(symbol string, deduplicationID string); Following Example shows how to define a SQS sink to publish messages to the service","title":"sqs (Sink)"},{"location":"api/1.0.6/#source","text":"","title":"Source"},{"location":"api/1.0.6/#sqs-source","text":"SQS source allows users to connect and consume messages from a AWS SQS Queue. It has the ability to receive Text messages Syntax @source(type=\"sqs\", queue=\"<STRING>\", access.key=\"<STRING>\", secret.key=\"<STRING>\", region=\"<STRING>\", polling.interval=\"<INT>\", wait.time=\"<INT>\", max.number.of.messages=\"<INT>\", visibility.timeout=\"<INT>\", delete.messages=\"<BOOL>\", delete.retry.interval=\"<INT>\", max.number.of.delete.retry.attempts=\"<INT>\", number.of.parallel.consumers=\"<INT>\", @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic queue Queue name which SQS Source should subscribe to STRING No No access.key Access Key for the Amazon Web Services. (This is a mandatory field and should be provided either in the deployment.yml or in the source definition itself) null STRING Yes No secret.key Secret Key of the Amazon User. (This is a mandatory field and should be provided either in the deployment.yml or in the source definition itself) null STRING Yes No region Amazon Web Service Region STRING No No polling.interval Interval (in milliseconds) between two message retrieval operations INT No No wait.time Maximum amount (in seconds) that a polling call will wait for a message to become available in the queue -1 INT Yes No max.number.of.messages Maximum number of messages retrieved from the queue per polling call (Actual maybe smaller than this even if there's more messages in the queue) 1 INT No No visibility.timeout The length of time (in seconds) for which a message received from a queue will be invisible to other consumers(only applicable if consumer doesn't purge the received messages from the queue). -1 INT Yes No delete.messages Should the message be deleted from the queue after consuming it. delete.messages BOOL Yes No delete.retry.interval Time interval (in milliseconds) consumer should retry to delete a message in the case of failure during a message delete operation. 5000 INT Yes No max.number.of.delete.retry.attempts Maximum number retry attempts to be performed in case of a failure. 10 INT Yes No number.of.parallel.consumers Size of the thread pool that should be used for polling. 1 INT No No Examples EXAMPLE 1 @source(type='sqs',queue='<queue url>',access.key='<access_key>',secret.key='<secret_key>',region='us-east-2',polling.interval='5000',max.number.of.messages='10',number.of.parallel.consumers='1',purge.messages='true',wait.time='2',visibility.timeout='30',delete.retry.interval='1000',max.number.of.delete.retry.attempts='10',@map(type='xml',enclosing.element=\"//events\",@attributes(symbol='symbol', message_id='trp:MESSAGE_ID') ))define stream inStream (symbol string, message_id string); Following Example shows how to define a SQS source to receive messages from the service","title":"sqs (Source)"},{"location":"api/1.0.7/","text":"API Docs - v1.0.7 \u00b6 Sink \u00b6 sqs (Sink) \u00b6 SQS sink allows users to connect and publish messages to an AWS SQS Queue. It has the ability to only publish Text messages Syntax @sink(type=\"sqs\", queue=\"<STRING>\", access.key=\"<STRING>\", secret.key=\"<STRING>\", region=\"<STRING>\", message.group.id=\"<STRING>\", deduplication.id=\"<STRING>\", delay.interval=\"<INT>\", @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic queue Queue url which SQS Sink should connect to STRING No No access.key Access Key for the Amazon Web Services. (This is a mandatory field and should be provided either in the deployment.yml or in the sink definition itself) none STRING Yes No secret.key Secret Key of the Amazon User. (This is a mandatory field and should be provided either in the deployment.yml or in the sink definition itself) none STRING Yes No region Amazon Web Service Region STRING No No message.group.id ID of the group that the message belong to(only applicable for FIFO Queues) null STRING Yes Yes deduplication.id ID by which a FIFO queue identifies the duplication in the queue(only applicable for FIFO queues) null STRING Yes Yes delay.interval Time in seconds for how long the message remain in the queue until it is available for the consumers to consume. -1 INT Yes No Examples EXAMPLE 1 @sink(type='sqs',queue='<queue_url>',access.key='<aws_access_key>',secret.key='<aws_secret_key>',region='<region>',delay.interval='5',deduplication.id='{{deduplicationID}}',message.group.id='charuka',@map(type='xml') )define stream outStream(symbol string, deduplicationID string); Following Example shows how to define a SQS sink to publish messages to the service Source \u00b6 sqs (Source) \u00b6 SQS source allows users to connect and consume messages from a AWS SQS Queue. It has the ability to receive Text messages Syntax @source(type=\"sqs\", queue=\"<STRING>\", access.key=\"<STRING>\", secret.key=\"<STRING>\", region=\"<STRING>\", polling.interval=\"<INT>\", wait.time=\"<INT>\", max.number.of.messages=\"<INT>\", visibility.timeout=\"<INT>\", delete.messages=\"<BOOL>\", delete.retry.interval=\"<INT>\", max.number.of.delete.retry.attempts=\"<INT>\", number.of.parallel.consumers=\"<INT>\", @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic queue Queue name which SQS Source should subscribe to STRING No No access.key Access Key for the Amazon Web Services. (This is a mandatory field and should be provided either in the deployment.yml or in the source definition itself) null STRING Yes No secret.key Secret Key of the Amazon User. (This is a mandatory field and should be provided either in the deployment.yml or in the source definition itself) null STRING Yes No region Amazon Web Service Region STRING No No polling.interval Interval (in milliseconds) between two message retrieval operations INT No No wait.time Maximum amount (in seconds) that a polling call will wait for a message to become available in the queue -1 INT Yes No max.number.of.messages Maximum number of messages retrieved from the queue per polling call (Actual maybe smaller than this even if there's more messages in the queue) 1 INT No No visibility.timeout The length of time (in seconds) for which a message received from a queue will be invisible to other consumers(only applicable if consumer doesn't purge the received messages from the queue). -1 INT Yes No delete.messages Should the message be deleted from the queue after consuming it. delete.messages BOOL Yes No delete.retry.interval Time interval (in milliseconds) consumer should retry to delete a message in the case of failure during a message delete operation. 5000 INT Yes No max.number.of.delete.retry.attempts Maximum number retry attempts to be performed in case of a failure. 10 INT Yes No number.of.parallel.consumers Size of the thread pool that should be used for polling. 1 INT No No Examples EXAMPLE 1 @source(type='sqs',queue='<queue url>',access.key='<access_key>',secret.key='<secret_key>',region='us-east-2',polling.interval='5000',max.number.of.messages='10',number.of.parallel.consumers='1',purge.messages='true',wait.time='2',visibility.timeout='30',delete.retry.interval='1000',max.number.of.delete.retry.attempts='10',@map(type='xml',enclosing.element=\"//events\",@attributes(symbol='symbol', message_id='trp:MESSAGE_ID') ))define stream inStream (symbol string, message_id string); Following Example shows how to define a SQS source to receive messages from the service","title":"1.0.7"},{"location":"api/1.0.7/#api-docs-v107","text":"","title":"API Docs - v1.0.7"},{"location":"api/1.0.7/#sink","text":"","title":"Sink"},{"location":"api/1.0.7/#sqs-sink","text":"SQS sink allows users to connect and publish messages to an AWS SQS Queue. It has the ability to only publish Text messages Syntax @sink(type=\"sqs\", queue=\"<STRING>\", access.key=\"<STRING>\", secret.key=\"<STRING>\", region=\"<STRING>\", message.group.id=\"<STRING>\", deduplication.id=\"<STRING>\", delay.interval=\"<INT>\", @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic queue Queue url which SQS Sink should connect to STRING No No access.key Access Key for the Amazon Web Services. (This is a mandatory field and should be provided either in the deployment.yml or in the sink definition itself) none STRING Yes No secret.key Secret Key of the Amazon User. (This is a mandatory field and should be provided either in the deployment.yml or in the sink definition itself) none STRING Yes No region Amazon Web Service Region STRING No No message.group.id ID of the group that the message belong to(only applicable for FIFO Queues) null STRING Yes Yes deduplication.id ID by which a FIFO queue identifies the duplication in the queue(only applicable for FIFO queues) null STRING Yes Yes delay.interval Time in seconds for how long the message remain in the queue until it is available for the consumers to consume. -1 INT Yes No Examples EXAMPLE 1 @sink(type='sqs',queue='<queue_url>',access.key='<aws_access_key>',secret.key='<aws_secret_key>',region='<region>',delay.interval='5',deduplication.id='{{deduplicationID}}',message.group.id='charuka',@map(type='xml') )define stream outStream(symbol string, deduplicationID string); Following Example shows how to define a SQS sink to publish messages to the service","title":"sqs (Sink)"},{"location":"api/1.0.7/#source","text":"","title":"Source"},{"location":"api/1.0.7/#sqs-source","text":"SQS source allows users to connect and consume messages from a AWS SQS Queue. It has the ability to receive Text messages Syntax @source(type=\"sqs\", queue=\"<STRING>\", access.key=\"<STRING>\", secret.key=\"<STRING>\", region=\"<STRING>\", polling.interval=\"<INT>\", wait.time=\"<INT>\", max.number.of.messages=\"<INT>\", visibility.timeout=\"<INT>\", delete.messages=\"<BOOL>\", delete.retry.interval=\"<INT>\", max.number.of.delete.retry.attempts=\"<INT>\", number.of.parallel.consumers=\"<INT>\", @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic queue Queue name which SQS Source should subscribe to STRING No No access.key Access Key for the Amazon Web Services. (This is a mandatory field and should be provided either in the deployment.yml or in the source definition itself) null STRING Yes No secret.key Secret Key of the Amazon User. (This is a mandatory field and should be provided either in the deployment.yml or in the source definition itself) null STRING Yes No region Amazon Web Service Region STRING No No polling.interval Interval (in milliseconds) between two message retrieval operations INT No No wait.time Maximum amount (in seconds) that a polling call will wait for a message to become available in the queue -1 INT Yes No max.number.of.messages Maximum number of messages retrieved from the queue per polling call (Actual maybe smaller than this even if there's more messages in the queue) 1 INT No No visibility.timeout The length of time (in seconds) for which a message received from a queue will be invisible to other consumers(only applicable if consumer doesn't purge the received messages from the queue). -1 INT Yes No delete.messages Should the message be deleted from the queue after consuming it. delete.messages BOOL Yes No delete.retry.interval Time interval (in milliseconds) consumer should retry to delete a message in the case of failure during a message delete operation. 5000 INT Yes No max.number.of.delete.retry.attempts Maximum number retry attempts to be performed in case of a failure. 10 INT Yes No number.of.parallel.consumers Size of the thread pool that should be used for polling. 1 INT No No Examples EXAMPLE 1 @source(type='sqs',queue='<queue url>',access.key='<access_key>',secret.key='<secret_key>',region='us-east-2',polling.interval='5000',max.number.of.messages='10',number.of.parallel.consumers='1',purge.messages='true',wait.time='2',visibility.timeout='30',delete.retry.interval='1000',max.number.of.delete.retry.attempts='10',@map(type='xml',enclosing.element=\"//events\",@attributes(symbol='symbol', message_id='trp:MESSAGE_ID') ))define stream inStream (symbol string, message_id string); Following Example shows how to define a SQS source to receive messages from the service","title":"sqs (Source)"},{"location":"api/1.0.8/","text":"API Docs - v1.0.8 \u00b6 Sink \u00b6 sqs (Sink) \u00b6 SQS sink allows users to connect and publish messages to an AWS SQS Queue. It has the ability to only publish Text messages Syntax @sink(type=\"sqs\", queue=\"<STRING>\", access.key=\"<STRING>\", secret.key=\"<STRING>\", region=\"<STRING>\", message.group.id=\"<STRING>\", deduplication.id=\"<STRING>\", delay.interval=\"<INT>\", @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic queue Queue url which SQS Sink should connect to STRING No No access.key Access Key for the Amazon Web Services. (This is a mandatory field and should be provided either in the deployment.yml or in the sink definition itself) none STRING Yes No secret.key Secret Key of the Amazon User. (This is a mandatory field and should be provided either in the deployment.yml or in the sink definition itself) none STRING Yes No region Amazon Web Service Region STRING No No message.group.id ID of the group that the message belong to(only applicable for FIFO Queues) null STRING Yes Yes deduplication.id ID by which a FIFO queue identifies the duplication in the queue(only applicable for FIFO queues) null STRING Yes Yes delay.interval Time in seconds for how long the message remain in the queue until it is available for the consumers to consume. -1 INT Yes No Examples EXAMPLE 1 @sink(type='sqs',queue='https://amazon.sqs.queue.url',access.key='aws.access.key',secret.key='aws.secret.key',region='us-east-1',delay.interval='5',message.group.id='group-1',@map(type='xml') )define stream outStream(symbol string, deduplicationID string); Above example demonstrate how an SQS sink is getting configured in order to publish messages to a SQS queue. Once an event is received by outStream, an xml message will be generated by 'xml' mapper from the attribute values of the event. Then SQS sink will connect to the queue using provided configurations and send the message to the queue. EXAMPLE 2 @sink(type='sqs',queue='https://amazon.sqs.queue.fifo',access.key='aws.access.key',secret.key='aws.secret.key',region='us-east-1',delay.interval='5',deduplication.id='{{deduplicationID}}',message.group.id='group-1',@map(type='xml') )define stream outStream(symbol string, deduplicationID string); Above example demonstrate how an SQS sink is getting configured in order to publish messages to a SQS FIFO queue. Once an event is received by outStream, an xml message will be generated by 'xml' mapper from the attribute values of the event. SQS sink will connect to the queue using provided configurations and send the messages to the queue. For each message deduplciation id will be selected from the attriibute 'deduplicationID' in the outStream. Source \u00b6 sqs (Source) \u00b6 SQS source allows users to connect and consume messages from a AWS SQS Queue. It has the ability to receive Text messages Syntax @source(type=\"sqs\", queue=\"<STRING>\", access.key=\"<STRING>\", secret.key=\"<STRING>\", region=\"<STRING>\", polling.interval=\"<INT>\", wait.time=\"<INT>\", max.number.of.messages=\"<INT>\", visibility.timeout=\"<INT>\", delete.messages=\"<BOOL>\", delete.retry.interval=\"<INT>\", max.number.of.delete.retry.attempts=\"<INT>\", number.of.parallel.consumers=\"<INT>\", @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic queue Queue name which SQS Source should subscribe to STRING No No access.key Access Key for the Amazon Web Services. (This is a mandatory field and should be provided either in the deployment.yml or in the source definition itself) null STRING Yes No secret.key Secret Key of the Amazon User. (This is a mandatory field and should be provided either in the deployment.yml or in the source definition itself) null STRING Yes No region Amazon Web Service Region STRING No No polling.interval Interval (in milliseconds) between two message retrieval operations INT No No wait.time Maximum amount (in seconds) that a polling call will wait for a message to become available in the queue -1 INT Yes No max.number.of.messages Maximum number of messages retrieved from the queue per polling call (Actual maybe smaller than this even if there's more messages in the queue) 1 INT No No visibility.timeout The length of time (in seconds) for which a message received from a queue will be invisible to other consumers(only applicable if consumer doesn't purge the received messages from the queue). -1 INT Yes No delete.messages Should the message be deleted from the queue after consuming it. delete.messages BOOL Yes No delete.retry.interval Time interval (in milliseconds) consumer should retry to delete a message in the case of failure during a message delete operation. 5000 INT Yes No max.number.of.delete.retry.attempts Maximum number retry attempts to be performed in case of a failure. 10 INT Yes No number.of.parallel.consumers Size of the thread pool that should be used for polling. 1 INT No No Examples EXAMPLE 1 @source(type='sqs',queue='http://aws.sqs.queue.url',access.key='aws.access.key',secret.key='aws.secret.key',region='us-east-2',polling.interval='5000',max.number.of.messages='10',number.of.parallel.consumers='1',purge.messages='true',wait.time='2',visibility.timeout='30',delete.retry.interval='1000',max.number.of.delete.retry.attempts='10',@map(type='xml',enclosing.element=\"//events\",@attributes(symbol='symbol', message_id='trp:MESSAGE_ID') ))define stream inStream (symbol string, message_id string); Above example demonstrate how an SQS source is getting configured in order to consume messages from an SQS queue. SQS source will establish the connection to a queue using given configurations and start consuming xml messages from the queue. Once a message is received by the source from the given queue, 'xml' mapper will generate a siddhi event from that message and pass it to the inStream.","title":"1.0.8"},{"location":"api/1.0.8/#api-docs-v108","text":"","title":"API Docs - v1.0.8"},{"location":"api/1.0.8/#sink","text":"","title":"Sink"},{"location":"api/1.0.8/#sqs-sink","text":"SQS sink allows users to connect and publish messages to an AWS SQS Queue. It has the ability to only publish Text messages Syntax @sink(type=\"sqs\", queue=\"<STRING>\", access.key=\"<STRING>\", secret.key=\"<STRING>\", region=\"<STRING>\", message.group.id=\"<STRING>\", deduplication.id=\"<STRING>\", delay.interval=\"<INT>\", @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic queue Queue url which SQS Sink should connect to STRING No No access.key Access Key for the Amazon Web Services. (This is a mandatory field and should be provided either in the deployment.yml or in the sink definition itself) none STRING Yes No secret.key Secret Key of the Amazon User. (This is a mandatory field and should be provided either in the deployment.yml or in the sink definition itself) none STRING Yes No region Amazon Web Service Region STRING No No message.group.id ID of the group that the message belong to(only applicable for FIFO Queues) null STRING Yes Yes deduplication.id ID by which a FIFO queue identifies the duplication in the queue(only applicable for FIFO queues) null STRING Yes Yes delay.interval Time in seconds for how long the message remain in the queue until it is available for the consumers to consume. -1 INT Yes No Examples EXAMPLE 1 @sink(type='sqs',queue='https://amazon.sqs.queue.url',access.key='aws.access.key',secret.key='aws.secret.key',region='us-east-1',delay.interval='5',message.group.id='group-1',@map(type='xml') )define stream outStream(symbol string, deduplicationID string); Above example demonstrate how an SQS sink is getting configured in order to publish messages to a SQS queue. Once an event is received by outStream, an xml message will be generated by 'xml' mapper from the attribute values of the event. Then SQS sink will connect to the queue using provided configurations and send the message to the queue. EXAMPLE 2 @sink(type='sqs',queue='https://amazon.sqs.queue.fifo',access.key='aws.access.key',secret.key='aws.secret.key',region='us-east-1',delay.interval='5',deduplication.id='{{deduplicationID}}',message.group.id='group-1',@map(type='xml') )define stream outStream(symbol string, deduplicationID string); Above example demonstrate how an SQS sink is getting configured in order to publish messages to a SQS FIFO queue. Once an event is received by outStream, an xml message will be generated by 'xml' mapper from the attribute values of the event. SQS sink will connect to the queue using provided configurations and send the messages to the queue. For each message deduplciation id will be selected from the attriibute 'deduplicationID' in the outStream.","title":"sqs (Sink)"},{"location":"api/1.0.8/#source","text":"","title":"Source"},{"location":"api/1.0.8/#sqs-source","text":"SQS source allows users to connect and consume messages from a AWS SQS Queue. It has the ability to receive Text messages Syntax @source(type=\"sqs\", queue=\"<STRING>\", access.key=\"<STRING>\", secret.key=\"<STRING>\", region=\"<STRING>\", polling.interval=\"<INT>\", wait.time=\"<INT>\", max.number.of.messages=\"<INT>\", visibility.timeout=\"<INT>\", delete.messages=\"<BOOL>\", delete.retry.interval=\"<INT>\", max.number.of.delete.retry.attempts=\"<INT>\", number.of.parallel.consumers=\"<INT>\", @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic queue Queue name which SQS Source should subscribe to STRING No No access.key Access Key for the Amazon Web Services. (This is a mandatory field and should be provided either in the deployment.yml or in the source definition itself) null STRING Yes No secret.key Secret Key of the Amazon User. (This is a mandatory field and should be provided either in the deployment.yml or in the source definition itself) null STRING Yes No region Amazon Web Service Region STRING No No polling.interval Interval (in milliseconds) between two message retrieval operations INT No No wait.time Maximum amount (in seconds) that a polling call will wait for a message to become available in the queue -1 INT Yes No max.number.of.messages Maximum number of messages retrieved from the queue per polling call (Actual maybe smaller than this even if there's more messages in the queue) 1 INT No No visibility.timeout The length of time (in seconds) for which a message received from a queue will be invisible to other consumers(only applicable if consumer doesn't purge the received messages from the queue). -1 INT Yes No delete.messages Should the message be deleted from the queue after consuming it. delete.messages BOOL Yes No delete.retry.interval Time interval (in milliseconds) consumer should retry to delete a message in the case of failure during a message delete operation. 5000 INT Yes No max.number.of.delete.retry.attempts Maximum number retry attempts to be performed in case of a failure. 10 INT Yes No number.of.parallel.consumers Size of the thread pool that should be used for polling. 1 INT No No Examples EXAMPLE 1 @source(type='sqs',queue='http://aws.sqs.queue.url',access.key='aws.access.key',secret.key='aws.secret.key',region='us-east-2',polling.interval='5000',max.number.of.messages='10',number.of.parallel.consumers='1',purge.messages='true',wait.time='2',visibility.timeout='30',delete.retry.interval='1000',max.number.of.delete.retry.attempts='10',@map(type='xml',enclosing.element=\"//events\",@attributes(symbol='symbol', message_id='trp:MESSAGE_ID') ))define stream inStream (symbol string, message_id string); Above example demonstrate how an SQS source is getting configured in order to consume messages from an SQS queue. SQS source will establish the connection to a queue using given configurations and start consuming xml messages from the queue. Once a message is received by the source from the given queue, 'xml' mapper will generate a siddhi event from that message and pass it to the inStream.","title":"sqs (Source)"},{"location":"api/1.1.0/","text":"API Docs - v1.1.0 \u00b6 Sink \u00b6 sqs (Sink) \u00b6 SQS sink allows users to connect and publish messages to an AWS SQS Queue. It has the ability to only publish Text messages Syntax @sink(type=\"sqs\", queue=\"<STRING>\", access.key=\"<STRING>\", secret.key=\"<STRING>\", region=\"<STRING>\", message.group.id=\"<STRING>\", deduplication.id=\"<STRING>\", delay.interval=\"<INT>\", @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic queue Queue url which SQS Sink should connect to STRING No No access.key Access Key for the Amazon Web Services. (This is a mandatory field and should be provided either in the deployment.yml or in the sink definition itself) none STRING Yes No secret.key Secret Key of the Amazon User. (This is a mandatory field and should be provided either in the deployment.yml or in the sink definition itself) none STRING Yes No region Amazon Web Service Region STRING No No message.group.id ID of the group that the message belong to(only applicable for FIFO Queues) null STRING Yes Yes deduplication.id ID by which a FIFO queue identifies the duplication in the queue(only applicable for FIFO queues) null STRING Yes Yes delay.interval Time in seconds for how long the message remain in the queue until it is available for the consumers to consume. -1 INT Yes No Examples EXAMPLE 1 @sink(type='sqs',queue='https://amazon.sqs.queue.url',access.key='aws.access.key',secret.key='aws.secret.key',region='us-east-1',delay.interval='5',message.group.id='group-1',@map(type='xml') )define stream outStream(symbol string, deduplicationID string); Above example demonstrate how an SQS sink is getting configured in order to publish messages to a SQS queue. Once an event is received by outStream, an xml message will be generated by 'xml' mapper from the attribute values of the event. Then SQS sink will connect to the queue using provided configurations and send the message to the queue. EXAMPLE 2 @sink(type='sqs',queue='https://amazon.sqs.queue.fifo',access.key='aws.access.key',secret.key='aws.secret.key',region='us-east-1',delay.interval='5',deduplication.id='{{deduplicationID}}',message.group.id='group-1',@map(type='xml') )define stream outStream(symbol string, deduplicationID string); Above example demonstrate how an SQS sink is getting configured in order to publish messages to a SQS FIFO queue. Once an event is received by outStream, an xml message will be generated by 'xml' mapper from the attribute values of the event. SQS sink will connect to the queue using provided configurations and send the messages to the queue. For each message deduplciation id will be selected from the attriibute 'deduplicationID' in the outStream. Source \u00b6 sqs (Source) \u00b6 SQS source allows users to connect and consume messages from a AWS SQS Queue. It has the ability to receive Text messages Syntax @source(type=\"sqs\", queue=\"<STRING>\", access.key=\"<STRING>\", secret.key=\"<STRING>\", region=\"<STRING>\", polling.interval=\"<INT>\", wait.time=\"<INT>\", max.number.of.messages=\"<INT>\", visibility.timeout=\"<INT>\", delete.messages=\"<BOOL>\", delete.retry.interval=\"<INT>\", max.number.of.delete.retry.attempts=\"<INT>\", number.of.parallel.consumers=\"<INT>\", @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic queue Queue name which SQS Source should subscribe to STRING No No access.key Access Key for the Amazon Web Services. (This is a mandatory field and should be provided either in the deployment.yml or in the source definition itself) null STRING Yes No secret.key Secret Key of the Amazon User. (This is a mandatory field and should be provided either in the deployment.yml or in the source definition itself) null STRING Yes No region Amazon Web Service Region STRING No No polling.interval Interval (in milliseconds) between two message retrieval operations INT No No wait.time Maximum amount (in seconds) that a polling call will wait for a message to become available in the queue -1 INT Yes No max.number.of.messages Maximum number of messages retrieved from the queue per polling call (Actual maybe smaller than this even if there's more messages in the queue) 1 INT No No visibility.timeout The length of time (in seconds) for which a message received from a queue will be invisible to other consumers(only applicable if consumer doesn't purge the received messages from the queue). -1 INT Yes No delete.messages Should the message be deleted from the queue after consuming it. delete.messages BOOL Yes No delete.retry.interval Time interval (in milliseconds) consumer should retry to delete a message in the case of failure during a message delete operation. 5000 INT Yes No max.number.of.delete.retry.attempts Maximum number retry attempts to be performed in case of a failure. 10 INT Yes No number.of.parallel.consumers Size of the thread pool that should be used for polling. 1 INT No No Examples EXAMPLE 1 @source(type='sqs',queue='http://aws.sqs.queue.url',access.key='aws.access.key',secret.key='aws.secret.key',region='us-east-2',polling.interval='5000',max.number.of.messages='10',number.of.parallel.consumers='1',purge.messages='true',wait.time='2',visibility.timeout='30',delete.retry.interval='1000',max.number.of.delete.retry.attempts='10',@map(type='xml',enclosing.element=\"//events\",@attributes(symbol='symbol', message_id='trp:MESSAGE_ID') ))define stream inStream (symbol string, message_id string); Above example demonstrate how an SQS source is getting configured in order to consume messages from an SQS queue. SQS source will establish the connection to a queue using given configurations and start consuming xml messages from the queue. Once a message is received by the source from the given queue, 'xml' mapper will generate a siddhi event from that message and pass it to the inStream.","title":"1.1.0"},{"location":"api/1.1.0/#api-docs-v110","text":"","title":"API Docs - v1.1.0"},{"location":"api/1.1.0/#sink","text":"","title":"Sink"},{"location":"api/1.1.0/#sqs-sink","text":"SQS sink allows users to connect and publish messages to an AWS SQS Queue. It has the ability to only publish Text messages Syntax @sink(type=\"sqs\", queue=\"<STRING>\", access.key=\"<STRING>\", secret.key=\"<STRING>\", region=\"<STRING>\", message.group.id=\"<STRING>\", deduplication.id=\"<STRING>\", delay.interval=\"<INT>\", @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic queue Queue url which SQS Sink should connect to STRING No No access.key Access Key for the Amazon Web Services. (This is a mandatory field and should be provided either in the deployment.yml or in the sink definition itself) none STRING Yes No secret.key Secret Key of the Amazon User. (This is a mandatory field and should be provided either in the deployment.yml or in the sink definition itself) none STRING Yes No region Amazon Web Service Region STRING No No message.group.id ID of the group that the message belong to(only applicable for FIFO Queues) null STRING Yes Yes deduplication.id ID by which a FIFO queue identifies the duplication in the queue(only applicable for FIFO queues) null STRING Yes Yes delay.interval Time in seconds for how long the message remain in the queue until it is available for the consumers to consume. -1 INT Yes No Examples EXAMPLE 1 @sink(type='sqs',queue='https://amazon.sqs.queue.url',access.key='aws.access.key',secret.key='aws.secret.key',region='us-east-1',delay.interval='5',message.group.id='group-1',@map(type='xml') )define stream outStream(symbol string, deduplicationID string); Above example demonstrate how an SQS sink is getting configured in order to publish messages to a SQS queue. Once an event is received by outStream, an xml message will be generated by 'xml' mapper from the attribute values of the event. Then SQS sink will connect to the queue using provided configurations and send the message to the queue. EXAMPLE 2 @sink(type='sqs',queue='https://amazon.sqs.queue.fifo',access.key='aws.access.key',secret.key='aws.secret.key',region='us-east-1',delay.interval='5',deduplication.id='{{deduplicationID}}',message.group.id='group-1',@map(type='xml') )define stream outStream(symbol string, deduplicationID string); Above example demonstrate how an SQS sink is getting configured in order to publish messages to a SQS FIFO queue. Once an event is received by outStream, an xml message will be generated by 'xml' mapper from the attribute values of the event. SQS sink will connect to the queue using provided configurations and send the messages to the queue. For each message deduplciation id will be selected from the attriibute 'deduplicationID' in the outStream.","title":"sqs (Sink)"},{"location":"api/1.1.0/#source","text":"","title":"Source"},{"location":"api/1.1.0/#sqs-source","text":"SQS source allows users to connect and consume messages from a AWS SQS Queue. It has the ability to receive Text messages Syntax @source(type=\"sqs\", queue=\"<STRING>\", access.key=\"<STRING>\", secret.key=\"<STRING>\", region=\"<STRING>\", polling.interval=\"<INT>\", wait.time=\"<INT>\", max.number.of.messages=\"<INT>\", visibility.timeout=\"<INT>\", delete.messages=\"<BOOL>\", delete.retry.interval=\"<INT>\", max.number.of.delete.retry.attempts=\"<INT>\", number.of.parallel.consumers=\"<INT>\", @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic queue Queue name which SQS Source should subscribe to STRING No No access.key Access Key for the Amazon Web Services. (This is a mandatory field and should be provided either in the deployment.yml or in the source definition itself) null STRING Yes No secret.key Secret Key of the Amazon User. (This is a mandatory field and should be provided either in the deployment.yml or in the source definition itself) null STRING Yes No region Amazon Web Service Region STRING No No polling.interval Interval (in milliseconds) between two message retrieval operations INT No No wait.time Maximum amount (in seconds) that a polling call will wait for a message to become available in the queue -1 INT Yes No max.number.of.messages Maximum number of messages retrieved from the queue per polling call (Actual maybe smaller than this even if there's more messages in the queue) 1 INT No No visibility.timeout The length of time (in seconds) for which a message received from a queue will be invisible to other consumers(only applicable if consumer doesn't purge the received messages from the queue). -1 INT Yes No delete.messages Should the message be deleted from the queue after consuming it. delete.messages BOOL Yes No delete.retry.interval Time interval (in milliseconds) consumer should retry to delete a message in the case of failure during a message delete operation. 5000 INT Yes No max.number.of.delete.retry.attempts Maximum number retry attempts to be performed in case of a failure. 10 INT Yes No number.of.parallel.consumers Size of the thread pool that should be used for polling. 1 INT No No Examples EXAMPLE 1 @source(type='sqs',queue='http://aws.sqs.queue.url',access.key='aws.access.key',secret.key='aws.secret.key',region='us-east-2',polling.interval='5000',max.number.of.messages='10',number.of.parallel.consumers='1',purge.messages='true',wait.time='2',visibility.timeout='30',delete.retry.interval='1000',max.number.of.delete.retry.attempts='10',@map(type='xml',enclosing.element=\"//events\",@attributes(symbol='symbol', message_id='trp:MESSAGE_ID') ))define stream inStream (symbol string, message_id string); Above example demonstrate how an SQS source is getting configured in order to consume messages from an SQS queue. SQS source will establish the connection to a queue using given configurations and start consuming xml messages from the queue. Once a message is received by the source from the given queue, 'xml' mapper will generate a siddhi event from that message and pass it to the inStream.","title":"sqs (Source)"},{"location":"api/latest/","text":"API Docs - v1.1.1-SNAPSHOT \u00b6 Sink \u00b6 sqs (Sink) \u00b6 SQS sink allows users to connect and publish messages to an AWS SQS Queue. It has the ability to only publish Text messages Syntax @sink(type=\"sqs\", queue=\"<STRING>\", access.key=\"<STRING>\", secret.key=\"<STRING>\", region=\"<STRING>\", message.group.id=\"<STRING>\", deduplication.id=\"<STRING>\", delay.interval=\"<INT>\", @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic queue Queue url which SQS Sink should connect to STRING No No access.key Access Key for the Amazon Web Services. (This is a mandatory field and should be provided either in the deployment.yml or in the sink definition itself) none STRING Yes No secret.key Secret Key of the Amazon User. (This is a mandatory field and should be provided either in the deployment.yml or in the sink definition itself) none STRING Yes No region Amazon Web Service Region STRING No No message.group.id ID of the group that the message belong to(only applicable for FIFO Queues) null STRING Yes Yes deduplication.id ID by which a FIFO queue identifies the duplication in the queue(only applicable for FIFO queues) null STRING Yes Yes delay.interval Time in seconds for how long the message remain in the queue until it is available for the consumers to consume. -1 INT Yes No Examples EXAMPLE 1 @sink(type='sqs',queue='https://amazon.sqs.queue.url',access.key='aws.access.key',secret.key='aws.secret.key',region='us-east-1',delay.interval='5',message.group.id='group-1',@map(type='xml') )define stream outStream(symbol string, deduplicationID string); Above example demonstrate how an SQS sink is getting configured in order to publish messages to a SQS queue. Once an event is received by outStream, an xml message will be generated by 'xml' mapper from the attribute values of the event. Then SQS sink will connect to the queue using provided configurations and send the message to the queue. EXAMPLE 2 @sink(type='sqs',queue='https://amazon.sqs.queue.fifo',access.key='aws.access.key',secret.key='aws.secret.key',region='us-east-1',delay.interval='5',deduplication.id='{{deduplicationID}}',message.group.id='group-1',@map(type='xml') )define stream outStream(symbol string, deduplicationID string); Above example demonstrate how an SQS sink is getting configured in order to publish messages to a SQS FIFO queue. Once an event is received by outStream, an xml message will be generated by 'xml' mapper from the attribute values of the event. SQS sink will connect to the queue using provided configurations and send the messages to the queue. For each message deduplciation id will be selected from the attriibute 'deduplicationID' in the outStream. Source \u00b6 sqs (Source) \u00b6 SQS source allows users to connect and consume messages from a AWS SQS Queue. It has the ability to receive Text messages Syntax @source(type=\"sqs\", queue=\"<STRING>\", access.key=\"<STRING>\", secret.key=\"<STRING>\", region=\"<STRING>\", polling.interval=\"<INT>\", wait.time=\"<INT>\", max.number.of.messages=\"<INT>\", visibility.timeout=\"<INT>\", delete.messages=\"<BOOL>\", delete.retry.interval=\"<INT>\", max.number.of.delete.retry.attempts=\"<INT>\", number.of.parallel.consumers=\"<INT>\", @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic queue Queue name which SQS Source should subscribe to STRING No No access.key Access Key for the Amazon Web Services. (This is a mandatory field and should be provided either in the deployment.yml or in the source definition itself) null STRING Yes No secret.key Secret Key of the Amazon User. (This is a mandatory field and should be provided either in the deployment.yml or in the source definition itself) null STRING Yes No region Amazon Web Service Region STRING No No polling.interval Interval (in milliseconds) between two message retrieval operations INT No No wait.time Maximum amount (in seconds) that a polling call will wait for a message to become available in the queue -1 INT Yes No max.number.of.messages Maximum number of messages retrieved from the queue per polling call (Actual maybe smaller than this even if there's more messages in the queue) 1 INT No No visibility.timeout The length of time (in seconds) for which a message received from a queue will be invisible to other consumers(only applicable if consumer doesn't purge the received messages from the queue). -1 INT Yes No delete.messages Should the message be deleted from the queue after consuming it. delete.messages BOOL Yes No delete.retry.interval Time interval (in milliseconds) consumer should retry to delete a message in the case of failure during a message delete operation. 5000 INT Yes No max.number.of.delete.retry.attempts Maximum number retry attempts to be performed in case of a failure. 10 INT Yes No number.of.parallel.consumers Size of the thread pool that should be used for polling. 1 INT No No Examples EXAMPLE 1 @source(type='sqs',queue='http://aws.sqs.queue.url',access.key='aws.access.key',secret.key='aws.secret.key',region='us-east-2',polling.interval='5000',max.number.of.messages='10',number.of.parallel.consumers='1',purge.messages='true',wait.time='2',visibility.timeout='30',delete.retry.interval='1000',max.number.of.delete.retry.attempts='10',@map(type='xml',enclosing.element=\"//events\",@attributes(symbol='symbol', message_id='trp:MESSAGE_ID') ))define stream inStream (symbol string, message_id string); Above example demonstrate how an SQS source is getting configured in order to consume messages from an SQS queue. SQS source will establish the connection to a queue using given configurations and start consuming xml messages from the queue. Once a message is received by the source from the given queue, 'xml' mapper will generate a siddhi event from that message and pass it to the inStream.","title":"latest"},{"location":"api/latest/#api-docs-v111-snapshot","text":"","title":"API Docs - v1.1.1-SNAPSHOT"},{"location":"api/latest/#sink","text":"","title":"Sink"},{"location":"api/latest/#sqs-sink","text":"SQS sink allows users to connect and publish messages to an AWS SQS Queue. It has the ability to only publish Text messages Syntax @sink(type=\"sqs\", queue=\"<STRING>\", access.key=\"<STRING>\", secret.key=\"<STRING>\", region=\"<STRING>\", message.group.id=\"<STRING>\", deduplication.id=\"<STRING>\", delay.interval=\"<INT>\", @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic queue Queue url which SQS Sink should connect to STRING No No access.key Access Key for the Amazon Web Services. (This is a mandatory field and should be provided either in the deployment.yml or in the sink definition itself) none STRING Yes No secret.key Secret Key of the Amazon User. (This is a mandatory field and should be provided either in the deployment.yml or in the sink definition itself) none STRING Yes No region Amazon Web Service Region STRING No No message.group.id ID of the group that the message belong to(only applicable for FIFO Queues) null STRING Yes Yes deduplication.id ID by which a FIFO queue identifies the duplication in the queue(only applicable for FIFO queues) null STRING Yes Yes delay.interval Time in seconds for how long the message remain in the queue until it is available for the consumers to consume. -1 INT Yes No Examples EXAMPLE 1 @sink(type='sqs',queue='https://amazon.sqs.queue.url',access.key='aws.access.key',secret.key='aws.secret.key',region='us-east-1',delay.interval='5',message.group.id='group-1',@map(type='xml') )define stream outStream(symbol string, deduplicationID string); Above example demonstrate how an SQS sink is getting configured in order to publish messages to a SQS queue. Once an event is received by outStream, an xml message will be generated by 'xml' mapper from the attribute values of the event. Then SQS sink will connect to the queue using provided configurations and send the message to the queue. EXAMPLE 2 @sink(type='sqs',queue='https://amazon.sqs.queue.fifo',access.key='aws.access.key',secret.key='aws.secret.key',region='us-east-1',delay.interval='5',deduplication.id='{{deduplicationID}}',message.group.id='group-1',@map(type='xml') )define stream outStream(symbol string, deduplicationID string); Above example demonstrate how an SQS sink is getting configured in order to publish messages to a SQS FIFO queue. Once an event is received by outStream, an xml message will be generated by 'xml' mapper from the attribute values of the event. SQS sink will connect to the queue using provided configurations and send the messages to the queue. For each message deduplciation id will be selected from the attriibute 'deduplicationID' in the outStream.","title":"sqs (Sink)"},{"location":"api/latest/#source","text":"","title":"Source"},{"location":"api/latest/#sqs-source","text":"SQS source allows users to connect and consume messages from a AWS SQS Queue. It has the ability to receive Text messages Syntax @source(type=\"sqs\", queue=\"<STRING>\", access.key=\"<STRING>\", secret.key=\"<STRING>\", region=\"<STRING>\", polling.interval=\"<INT>\", wait.time=\"<INT>\", max.number.of.messages=\"<INT>\", visibility.timeout=\"<INT>\", delete.messages=\"<BOOL>\", delete.retry.interval=\"<INT>\", max.number.of.delete.retry.attempts=\"<INT>\", number.of.parallel.consumers=\"<INT>\", @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic queue Queue name which SQS Source should subscribe to STRING No No access.key Access Key for the Amazon Web Services. (This is a mandatory field and should be provided either in the deployment.yml or in the source definition itself) null STRING Yes No secret.key Secret Key of the Amazon User. (This is a mandatory field and should be provided either in the deployment.yml or in the source definition itself) null STRING Yes No region Amazon Web Service Region STRING No No polling.interval Interval (in milliseconds) between two message retrieval operations INT No No wait.time Maximum amount (in seconds) that a polling call will wait for a message to become available in the queue -1 INT Yes No max.number.of.messages Maximum number of messages retrieved from the queue per polling call (Actual maybe smaller than this even if there's more messages in the queue) 1 INT No No visibility.timeout The length of time (in seconds) for which a message received from a queue will be invisible to other consumers(only applicable if consumer doesn't purge the received messages from the queue). -1 INT Yes No delete.messages Should the message be deleted from the queue after consuming it. delete.messages BOOL Yes No delete.retry.interval Time interval (in milliseconds) consumer should retry to delete a message in the case of failure during a message delete operation. 5000 INT Yes No max.number.of.delete.retry.attempts Maximum number retry attempts to be performed in case of a failure. 10 INT Yes No number.of.parallel.consumers Size of the thread pool that should be used for polling. 1 INT No No Examples EXAMPLE 1 @source(type='sqs',queue='http://aws.sqs.queue.url',access.key='aws.access.key',secret.key='aws.secret.key',region='us-east-2',polling.interval='5000',max.number.of.messages='10',number.of.parallel.consumers='1',purge.messages='true',wait.time='2',visibility.timeout='30',delete.retry.interval='1000',max.number.of.delete.retry.attempts='10',@map(type='xml',enclosing.element=\"//events\",@attributes(symbol='symbol', message_id='trp:MESSAGE_ID') ))define stream inStream (symbol string, message_id string); Above example demonstrate how an SQS source is getting configured in order to consume messages from an SQS queue. SQS source will establish the connection to a queue using given configurations and start consuming xml messages from the queue. Once a message is received by the source from the given queue, 'xml' mapper will generate a siddhi event from that message and pass it to the inStream.","title":"sqs (Source)"}]}